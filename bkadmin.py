# -*- coding: utf-8 -*-
import asyncio
import logging
import random
import re
from datetime import datetime, timedelta
from typing import Dict, Any

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters.state import StateFilter
from sqlalchemy import create_engine, Column, Integer, String, Float, Boolean, DateTime, ForeignKey
from sqlalchemy.orm import sessionmaker, relationship, declarative_base
from sqlalchemy.exc import SQLAlchemyError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)
logging.getLogger("aiogram").setLevel(logging.DEBUG)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = "YOUR_ADMIN_BOT_TOKEN"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –∞–¥–º–∏–Ω-–±–æ—Ç–∞
MAIN_BOT_TOKEN = "7774081383:AAGCn5ayceHhXVJ9p02n1qlJj9GUSzqYiGY"  # –¢–æ–∫–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
ADMIN_CHAT_ID = 7566465615
ADMIN_USERNAME = "@win_betuz"
CHANNEL_LINK = "https://t.me/WINBETPROMO"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω-–±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (—Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Å –æ—Å–Ω–æ–≤–Ω—ã–º –±–æ—Ç–æ–º)
engine = create_engine("sqlite:///betting.db", echo=False)
Base = declarative_base()

# –ú–æ–¥–µ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–∏–¥–µ–Ω—Ç–∏—á–Ω—ã –æ—Å–Ω–æ–≤–Ω–æ–º—É –±–æ—Ç—É)
class User(Base):
    __tablename__ = "users"
    id = Column(Integer, primary_key=True)
    telegram_id = Column(Integer, unique=True)
    username = Column(String)
    phone = Column(String)
    balance = Column(Float, default=0.0)
    language = Column(String, default="ru")
    referral_id = Column(Integer)
    referral_earnings = Column(Float, default=0.0)
    total_winnings = Column(Float, default=0.0)
    game_count = Column(Integer, default=0)
    is_banned = Column(Boolean, default=False)
    deposit_count = Column(Integer, default=0)
    total_deposits = Column(Float, default=0.0)
    withdrawal_count = Column(Integer, default=0)
    total_withdrawals = Column(Float, default=0.0)
    last_daily = Column(DateTime)
    always_win = Column(Boolean, default=False)
    total_bets = Column(Float, default=0.0)
    promos = relationship("UserPromoCode", back_populates="user")
    tasks = relationship("UserTask", back_populates="user")

class PromoCode(Base):
    __tablename__ = "promo_codes"
    id = Column(Integer, primary_key=True)
    code = Column(String, unique=True)
    amount = Column(Float)
    uses_remaining = Column(Integer)
    created_by = Column(Integer)
    users = relationship("UserPromoCode", back_populates="promo_code")

class UserPromoCode(Base):
    __tablename__ = "user_promo_codes"
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey("users.id"))
    promo_code_id = Column(Integer, ForeignKey("promo_codes.id"))
    user = relationship("User", back_populates="promos")
    promo_code = relationship("PromoCode", back_populates="users")

class Task(Base):
    __tablename__ = "tasks"
    id = Column(Integer, primary_key=True)
    task_type = Column(String)
    reward = Column(Float)
    link = Column(String)
    min_followers = Column(Integer, default=0)
    active = Column(Boolean, default=True)
    users = relationship("UserTask", back_populates="task")

class UserTask(Base):
    __tablename__ = "user_tasks"
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey("users.id"))
    task_id = Column(Integer, ForeignKey("tasks.id"))
    status = Column(String, default="pending")
    submission = Column(String)
    user = relationship("User", back_populates="tasks")
    task = relationship("Task", back_populates="users")

class WithdrawRequest(Base):
    __tablename__ = "withdraw_requests"
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer)
    amount = Column(Float)
    method = Column(String)
    details = Column(String)
    status = Column(String, default="pending")
    timestamp = Column(DateTime, default=datetime.utcnow)

Base.metadata.create_all(engine)
logger.debug("–¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω—ã")
Session = sessionmaker(bind=engine)

# –ü–µ—Ä–µ–≤–æ–¥—ã (–¥–ª—è –∞–¥–º–∏–Ω-–±–æ—Ç–∞)
TRANSLATIONS = {
    "ru": {
        "welcome_admin": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω {}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        "not_admin": "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!",
        "ban_user": "üë§ –í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–Ω–∞:",
        "unban_user": "üë§ –í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞:",
        "user_banned": "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!",
        "user_unbanned": "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!",
        "user_not_found": "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω!",
        "set_always_win": "üë§ –í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ always_win:",
        "always_win_set": "‚úÖ –†–µ–∂–∏–º always_win —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}!",
        "create_promo": "üéÅ –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–∫–æ–¥, —Å—É–º–º–∞, –∫–æ–ª-–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π):",
        "promo_created": "‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ {} —Å–æ–∑–¥–∞–Ω! –°—É–º–º–∞: {}, –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {}",
        "promo_invalid": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–∞!",
        "error": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        "approve_deposit": "‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {} —Å—É–º –¥–ª—è {} –æ–¥–æ–±—Ä–µ–Ω–æ! –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {:.2f} —Å—É–º",
        "decline_deposit": "‚ùå –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {} —Å—É–º –¥–ª—è {} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ!",
        "approve_withdraw": "‚úÖ –í—ã–≤–æ–¥ –Ω–∞ {} —Å—É–º –¥–ª—è {} –æ–¥–æ–±—Ä–µ–Ω! –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {:.2f} —Å—É–º",
        "decline_withdraw": "‚ùå –í—ã–≤–æ–¥ –Ω–∞ {} —Å—É–º –¥–ª—è {} –æ—Ç–∫–ª–æ–Ω—ë–Ω!",
        "approve_task": "‚úÖ –ó–∞–¥–∞–Ω–∏–µ –¥–ª—è {} –æ–¥–æ–±—Ä–µ–Ω–æ! –ù–∞–≥—Ä–∞–¥–∞: {} —Å—É–º, –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {:.2f} —Å—É–º",
        "decline_task": "‚ùå –ó–∞–¥–∞–Ω–∏–µ –¥–ª—è {} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ!",
        "user_info": "üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\nID: {}\n–ò–º—è: {}\n–ë–∞–ª–∞–Ω—Å: {:.2f} —Å—É–º\n–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–π: {}\n–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π: {:.2f} —Å—É–º\n–í—ã–≤–æ–¥–æ–≤: {}\n–°—É–º–º–∞ –≤—ã–≤–æ–¥–æ–≤: {:.2f} —Å—É–º\n–í—ã–∏–≥—Ä—ã—à–µ–π: {:.2f} —Å—É–º\n–ò–≥—Ä: {}\n–ó–∞–±–∞–Ω–µ–Ω: {}\nAlways Win: {}",
        "get_user_info": "üë§ –í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"
    },
    "en": {
        "welcome_admin": "Welcome, admin {}! Choose an action:",
        "not_admin": "‚ùå You do not have admin privileges!",
        "ban_user": "üë§ Enter the Telegram ID of the user to ban:",
        "unban_user": "üë§ Enter the Telegram ID of the user to unban:",
        "user_banned": "‚úÖ User {} has been banned!",
        "user_unbanned": "‚úÖ User {} has been unbanned!",
        "user_not_found": "‚ùå User with ID {} not found!",
        "set_always_win": "üë§ Enter the Telegram ID of the user to set always_win:",
        "always_win_set": "‚úÖ Always_win mode set for user {}!",
        "create_promo": "üéÅ Enter promo code details (code, amount, uses):",
        "promo_created": "‚úÖ Promo code {} created! Amount: {}, Uses: {}",
        "promo_invalid": "‚ùå Invalid promo code data format!",
        "error": "‚ùå An error occurred! Try again later.",
        "approve_deposit": "‚úÖ Deposit of {} UZS for {} approved! New balance: {:.2f} UZS",
        "decline_deposit": "‚ùå Deposit of {} UZS for {} declined!",
        "approve_withdraw": "‚úÖ Withdrawal of {} UZS for {} approved! New balance: {:.2f} UZS",
        "decline_withdraw": "‚ùå Withdrawal of {} UZS for {} declined!",
        "approve_task": "‚úÖ Task for {} approved! Reward: {} UZS, New balance: {:.2f} UZS",
        "decline_task": "‚ùå Task for {} declined!",
        "user_info": "üë§ User Info:\nID: {}\nName: {}\nBalance: {:.2f} UZS\nDeposits: {}\nTotal Deposits: {:.2f} UZS\nWithdrawals: {}\nTotal Withdrawals: {:.2f} UZS\nWinnings: {:.2f} UZS\nGames: {}\nBanned: {}\nAlways Win: {}",
        "get_user_info": "üë§ Enter the Telegram ID of the user to get info:"
    }
}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_admin_menu(language: str) -> ReplyKeyboardMarkup:
    translations = TRANSLATIONS.get(language, TRANSLATIONS["ru"])
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üö´ –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"), KeyboardButton(text="‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")],
            [KeyboardButton(text="üéÅ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥"), KeyboardButton(text="üîÆ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å always_win")],
            [KeyboardButton(text="üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")]
        ],
        resize_keyboard=True
    )

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –∞–¥–º–∏–Ω-–±–æ—Ç–∞
class AdminState(StatesGroup):
    ban_user = State()
    unban_user = State()
    set_always_win = State()
    create_promo = State()
    get_user_info = State()

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
async def is_admin(user_id: int) -> bool:
    return user_id == ADMIN_CHAT_ID or str(user_id) == str(ADMIN_CHAT_ID)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –∞–¥–º–∏–Ω-–±–æ—Ç–∞
@dp.message(Command("start"))
async def admin_start_command(message: types.Message, state: FSMContext):
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç {message.from_user.id}")
    if not await is_admin(message.from_user.id):
        await message.answer(TRANSLATIONS["ru"]["not_admin"], parse_mode="HTML")
        return
    language = "ru"  # –ê–¥–º–∏–Ω-–±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä—É—Å—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    translations = TRANSLATIONS[language]
    await message.answer(
        translations["welcome_admin"].format(message.from_user.username or "Admin"),
        parse_mode="HTML",
        reply_markup=get_admin_menu(language)
    )
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(lambda message: message.text == "üö´ –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def ban_user_command(message: types.Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        await message.answer(TRANSLATIONS["ru"]["not_admin"], parse_mode="HTML")
        return
    language = "ru"
    translations = TRANSLATIONS[language]
    await message.answer(
        translations["ban_user"],
        parse_mode="HTML"
    )
    await state.set_state(AdminState.ban_user)

@dp.message(StateFilter(AdminState.ban_user))
async def process_ban_user(message: types.Message, state: FSMContext):
    session = Session()
    try:
        language = "ru"
        translations = TRANSLATIONS[language]
        try:
            user_id = int(message.text)
        except ValueError:
            await message.answer(
                translations["ban_user"],
                parse_mode="HTML"
            )
            return
        user = session.query(User).filter_by(telegram_id=user_id).first()
        if not user:
            await message.answer(
                translations["user_not_found"].format(user_id),
                parse_mode="HTML",
                reply_markup=get_admin_menu(language)
            )
            await state.clear()
            return
        user.is_banned = True
        session.commit()
        await message.answer(
            translations["user_banned"].format(user_id),
            parse_mode="HTML",
            reply_markup=get_admin_menu(language)
        )
        await bot.send_message(
            chat_id=user_id,
            text="‚ùå –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!",
            parse_mode="HTML"
        )
        await state.clear()
    except Exception as e:
        session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_ban_user: {str(e)}", exc_info=True)
        await message.answer(
            translations["error"],
            parse_mode="HTML",
            reply_markup=get_admin_menu(language)
        )
        await state.clear()
    finally:
        session.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(lambda message: message.text == "‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def unban_user_command(message: types.Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        await message.answer(TRANSLATIONS["ru"]["not_admin"], parse_mode="HTML")
        return
    language = "ru"
    translations = TRANSLATIONS[language]
    await message.answer(
        translations["unban_user"],
        parse_mode="HTML"
    )
    await state.set_state(AdminState.unban_user)

@dp.message(StateFilter(AdminState.unban_user))
async def process_unban_user(message: types.Message, state: FSMContext):
    session = Session()
    try:
        language = "ru"
        translations = TRANSLATIONS[language]
        try:
            user_id = int(message.text)
        except ValueError:
            await message.answer(
                translations["unban_user"],
                parse_mode="HTML"
            )
            return
        user = session.query(User).filter_by(telegram_id=user_id).first()
        if not user:
            await message.answer(
                translations["user_not_found"].format(user_id),
                parse_mode="HTML",
                reply_markup=get_admin_menu(language)
            )
            await state.clear()
            return
        user.is_banned = False
        session.commit()
        await message.answer(
            translations["user_unbanned"].format(user_id),
            parse_mode="HTML",
            reply_markup=get_admin_menu(language)
        )
        await bot.send_message(
            chat_id=user_id,
            text="‚úÖ –í—ã –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!",
            parse_mode="HTML",
            reply_markup=get_main_menu(user.language)
        )
        await state.clear()
    except Exception as e:
        session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_unban_user: {str(e)}", exc_info=True)
        await message.answer(
            translations["error"],
            parse_mode="HTML",
            reply_markup=get_admin_menu(language)
        )
        await state.clear()
    finally:
        session.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ always_win
@dp.message(lambda message: message.text == "üîÆ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å always_win")
async def set_always_win_command(message: types.Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        await message.answer(TRANSLATIONS["ru"]["not_admin"], parse_mode="HTML")
        return
    language = "ru"
    translations = TRANSLATIONS[language]
    await message.answer(
        translations["set_always_win"],
        parse_mode="HTML"
    )
    await state.set_state(AdminState.set_always_win)

@dp.message(StateFilter(AdminState.set_always_win))
async def process_set_always_win(message: types.Message, state: FSMContext):
    session = Session()
    try:
        language = "ru"
        translations = TRANSLATIONS[language]
        try:
            user_id = int(message.text)
        except ValueError:
            await message.answer(
                translations["set_always_win"],
                parse_mode="HTML"
            )
            return
        user = session.query(User).filter_by(telegram_id=user_id).first()
        if not user:
            await message.answer(
                translations["user_not_found"].format(user_id),
                parse_mode="HTML",
                reply_markup=get_admin_menu(language)
            )
            await state.clear()
            return
        user.always_win = True
        session.commit()
        await message.answer(
            translations["always_win_set"].format(user_id),
            parse_mode="HTML",
            reply_markup=get_admin_menu(language)
        )
        await bot.send_message(
            chat_id=user_id,
            text="üîÆ –í–∞—à —Ä–µ–∂–∏–º always_win –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!",
            parse_mode="HTML"
        )
        await state.clear()
    except Exception as e:
        session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_set_always_win: {str(e)}", exc_info=True)
        await message.answer(
            translations["error"],
            parse_mode="HTML",
            reply_markup=get_admin_menu(language)
        )
        await state.clear()
    finally:
        session.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
@dp.message(lambda message: message.text == "üéÅ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥")
async def create_promo_command(message: types.Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        await message.answer(TRANSLATIONS["ru"]["not_admin"], parse_mode="HTML")
        return
    language = "ru"
    translations = TRANSLATIONS[language]
    await message.answer(
        translations["create_promo"],
        parse_mode="HTML"
    )
    await state.set_state(AdminState.create_promo)

@dp.message(StateFilter(AdminState.create_promo))
async def process_create_promo(message: types.Message, state: FSMContext):
    session = Session()
    try:
        language = "ru"
        translations = TRANSLATIONS[language]
        try:
            code, amount, uses = message.text.split()
            amount = float(amount)
            uses = int(uses)
            if amount <= 0 or uses <= 0:
                raise ValueError
        except ValueError:
            await message.answer(
                translations["promo_invalid"],
                parse_mode="HTML"
            )
            return
        promo = PromoCode(
            code=code,
            amount=amount,
            uses_remaining=uses,
            created_by=message.from_user.id
        )
        session.add(promo)
        session.commit()
        await message.answer(
            translations["promo_created"].format(code, amount, uses),
            parse_mode="HTML",
            reply_markup=get_admin_menu(language)
        )
        await state.clear()
    except Exception as e:
        session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_create_promo: {str(e)}", exc_info=True)
        await message.answer(
            translations["error"],
            parse_mode="HTML",
            reply_markup=get_admin_menu(language)
        )
        await state.clear()
    finally:
        session.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
@dp.message(lambda message: message.text == "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
async def get_user_info_command(message: types.Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        await message.answer(TRANSLATIONS["ru"]["not_admin"], parse_mode="HTML")
        return
    language = "ru"
    translations = TRANSLATIONS[language]
    await message.answer(
        translations["get_user_info"],
        parse_mode="HTML"
    )
    await state.set_state(AdminState.get_user_info)

@dp.message(StateFilter(AdminState.get_user_info))
async def process_get_user_info(message: types.Message, state: FSMContext):
    session = Session()
    try:
        language = "ru"
        translations = TRANSLATIONS[language]
        try:
            user_id = int(message.text)
        except ValueError:
            await message.answer(
                translations["get_user_info"],
                parse_mode="HTML"
            )
            return
        user = session.query(User).filter_by(telegram_id=user_id).first()
        if not user:
            await message.answer(
                translations["user_not_found"].format(user_id),
                parse_mode="HTML",
                reply_markup=get_admin_menu(language)
            )
            await state.clear()
            return
        await message.answer(
            translations["user_info"].format(
                user.telegram_id,
                user.username or "User",
                user.balance,
                user.deposit_count,
                user.total_deposits,
                user.withdrawal_count,
                user.total_withdrawals,
                user.total_winnings,
                user.game_count,
                "–î–∞" if user.is_banned else "–ù–µ—Ç",
                "–î–∞" if user.always_win else "–ù–µ—Ç"
            ),
            parse_mode="HTML",
            reply_markup=get_admin_menu(language)
        )
        await state.clear()
    except Exception as e:
        session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_get_user_info: {str(e)}", exc_info=True)
        await message.answer(
            translations["error"],
            parse_mode="HTML",
            reply_markup=get_admin_menu(language)
        )
        await state.clear()
    finally:
        session.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.message(lambda message: message.text.startswith("/approve_deposit_"))
async def approve_deposit(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer(TRANSLATIONS["ru"]["not_admin"], parse_mode="HTML")
        return
    session = Session()
    try:
        language = "ru"
        translations = TRANSLATIONS[language]
        try:
            _, user_id, amount = message.text.split("_")
            user_id = int(user_id)
            amount = float(amount)
        except ValueError:
            await message.answer(
                translations["error"],
                parse_mode="HTML",
                reply_markup=get_admin_menu(language)
            )
            return
        user = session.query(User).filter_by(telegram_id=user_id).first()
        if not user:
            await message.answer(
                translations["user_not_found"].format(user_id),
                parse_mode="HTML",
                reply_markup=get_admin_menu(language)
            )
            return
        user.balance += amount
        user.deposit_count += 1
        user.total_deposits += amount
        session.commit()
        await message.answer(
            translations["approve_deposit"].format(amount, user.username or "User", user.balance),
            parse_mode="HTML",
            reply_markup=get_admin_menu(language)
        )
        await bot.send_message(
            chat_id=user_id,
            text=translations["deposit_success"].format(amount, user.balance),
            parse_mode="HTML",
            reply_markup=get_main_menu(user.language)
        )
    except Exception as e:
        session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –≤ approve_deposit: {str(e)}", exc_info=True)
        await message.answer(
            translations["error"],
            parse_mode="HTML",
            reply_markup=get_admin_menu(language)
        )
    finally:
        session.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.message(lambda message: message.text.startswith("/decline_deposit_"))
async def decline_deposit(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer(TRANSLATIONS["ru"]["not_admin"], parse_mode="HTML")
        return
    session = Session()
    try:
        language = "ru"
        translations = TRANSLATIONS[language]
        try:
            _, user_id, amount = message.text.split("_")
            user_id = int(user_id)
            amount = float(amount)
        except ValueError:
            await message.answer(
                translations["error"],
                parse_mode="HTML",
                reply_markup=get_admin_menu(language)
            )
            return
        user = session.query(User).filter_by(telegram_id=user_id).first()
        if not user:
            await message.answer(
                translations["user_not_found"].format(user_id),
                parse_mode="HTML",
                reply_markup=get_admin_menu(language)
            )
            return
        await message.answer(
            translations["decline_deposit"].format(amount, user.username or "User"),
            parse_mode="HTML",
            reply_markup=get_admin_menu(language)
        )
        await bot.send_message(
            chat_id=user_id,
            text="‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {} —Å—É–º –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω!".format(amount),
            parse_mode="HTML",
            reply_markup=get_main_menu(user.language)
        )
    except Exception as e:
        session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –≤ decline_deposit: {str(e)}", exc_info=True)
        await message.answer(
            translations["error"],
            parse_mode="HTML",
            reply_markup=get_admin_menu(language)
        )
    finally:
        session.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–¥–æ–±—Ä–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞
@dp.message(lambda message: message.text.startswith("/approve_withdraw_"))
async def approve_withdraw(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer(TRANSLATIONS["ru"]["not_admin"], parse_mode="HTML")
        return
    session = Session()
    try:
        language = "ru"
        translations = TRANSLATIONS[language]
        try:
            _, user_id, amount = message.text.split("_")
            user_id = int(user_id)
            amount = float(amount)
        except ValueError:
            await message.answer(
                translations["error"],
                parse_mode="HTML",
                reply_markup=get_admin_menu(language)
            )
            return
        user = session.query(User).filter_by(telegram_id=user_id).first()
        if not user:
            await message.answer(
                translations["user_not_found"].format(user_id),
                parse_mode="HTML",
                reply_markup=get_admin_menu(language)
            )
            return
        withdraw_request = session.query(WithdrawRequest).filter_by(user_id=user_id, amount=amount, status="pending").first()
        if not withdraw_request:
            await message.answer(
                translations["error"],
                parse_mode="HTML",
                reply_markup=get_admin_menu(language)
            )
            return
        user.withdrawal_count += 1
        user.total_withdrawals += amount
        withdraw_request.status = "approved"
        session.commit()
        await message.answer(
            translations["approve_withdraw"].format(amount, user.username or "User", user.balance),
            parse_mode="HTML",
            reply_markup=get_admin_menu(language)
        )
        await bot.send_message(
            chat_id=user_id,
            text=translations["withdraw_success"].format(amount, user.balance),
            parse_mode="HTML",
            reply_markup=get_main_menu(user.language)
        )
    except Exception as e:
        session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –≤ approve_withdraw: {str(e)}", exc_info=True)
        await message.answer(
            translations["error"],
            parse_mode="HTML",
            reply_markup=get_admin_menu(language)
        )
    finally:
        session.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞
@dp.message(lambda message: message.text.startswith("/decline_withdraw_"))
async def decline_withdraw(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer(TRANSLATIONS["ru"]["not_admin"], parse_mode="HTML")
        return
    session = Session()
    try:
        language = "ru"
        translations = TRANSLATIONS[language]
        try:
            _, user_id, amount = message.text.split("_")
            user_id = int(user_id)
            amount = float(amount)
        except ValueError:
            await message.answer(
                translations["error"],
                parse_mode="HTML",
                reply_markup=get_admin_menu(language)
            )
            return
        user = session.query(User).filter_by(telegram_id=user_id).first()
        if not user:
            await message.answer(
                translations["user_not_found"].format(user_id),
                parse_mode="HTML",
                reply_markup=get_admin_menu(language)
            )
            return
        withdraw_request = session.query(WithdrawRequest).filter_by(user_id=user_id, amount=amount, status="pending").first()
        if not withdraw_request:
            await message.answer(
                translations["error"],
                parse_mode="HTML",
                reply_markup=get_admin_menu(language)
            )
            return
        user.balance += amount
        withdraw_request.status = "declined"
        session.commit()
        await message.answer(
            translations["decline_withdraw"].format(amount, user.username or "User"),
            parse_mode="HTML",
            reply_markup=get_admin_menu(language)
        )
        await bot.send_message(
            chat_id=user_id,
            text="‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –Ω–∞ {} —Å—É–º –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω! –ë–∞–ª–∞–Ω—Å –≤–æ–∑–≤—Ä–∞—â—ë–Ω: {:.2f} —Å—É–º".format(amount, user.balance),
            parse_mode="HTML",
            reply_markup=get_main_menu(user.language)
        )
    except Exception as e:
        session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –≤ decline_withdraw: {str(e)}", exc_info=True)
        await message.answer(
            translations["error"],
            parse_mode="HTML",
            reply_markup=get_admin_menu(language)
        )
    finally:
        session.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
@dp.message(lambda message: message.text.startswith("/approve_task_"))
async def approve_task(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer(TRANSLATIONS["ru"]["not_admin"], parse_mode="HTML")
        return
    session = Session()
    try:
        language = "ru"
        translations = TRANSLATIONS[language]
        try:
            _, user_id, task_id = message.text.split("_")
            user_id = int(user_id)
            task_id = int(task_id)
        except ValueError:
            await message.answer(
                translations["error"],
                parse_mode="HTML",
                reply_markup=get_admin_menu(language)
            )
            return
        user = session.query(User).filter_by(telegram_id=user_id).first()
        task = session.query(Task).filter_by(id=task_id).first()
        user_task = session.query(UserTask).filter_by(user_id=user.id, task_id=task_id, status="pending").first()
        if not user or not task or not user_task:
            await message.answer(
                translations["user_not_found"].format(user_id),
                parse_mode="HTML",
                reply_markup=get_admin_menu(language)
            )
            return
        user_task.status = "completed"
        user.balance += task.reward
        session.commit()
        await message.answer(
            translations["approve_task"].format(user.username or "User", task.reward, user.balance),
            parse_mode="HTML",
            reply_markup=get_admin_menu(language)
        )
        await bot.send_message(
            chat_id=user_id,
            text=translations["task_approved"].format(task.reward, user.balance),
            parse_mode="HTML",
            reply_markup=get_main_menu(user.language)
        )
    except Exception as e:
        session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –≤ approve_task: {str(e)}", exc_info=True)
        await message.answer(
            translations["error"],
            parse_mode="HTML",
            reply_markup=get_admin_menu(language)
        )
    finally:
        session.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
@dp.message(lambda message: message.text.startswith("/decline_task_"))
async def decline_task(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer(TRANSLATIONS["ru"]["not_admin"], parse_mode="HTML")
        return
    session = Session()
    try:
        language = "ru"
        translations = TRANSLATIONS[language]
        try:
            _, user_id, task_id = message.text.split("_")
            user_id = int(user_id)
            task_id = int(task_id)
        except ValueError:
            await message.answer(
                translations["error"],
                parse_mode="HTML",
                reply_markup=get_admin_menu(language)
            )
            return
        user = session.query(User).filter_by(telegram_id=user_id).first()
        user_task = session.query(UserTask).filter_by(user_id=user.id, task_id=task_id, status="pending").first()
        if not user or not user_task:
            await message.answer(
                translations["user_not_found"].format(user_id),
                parse_mode="HTML",
                reply_markup=get_admin_menu(language)
            )
            return
        user_task.status = "declined"
        session.commit()
        await message.answer(
            translations["decline_task"].format(user.username or "User"),
            parse_mode="HTML",
            reply_markup=get_admin_menu(language)
        )
        await bot.send_message(
            chat_id=user_id,
            text="‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω!",
            parse_mode="HTML",
            reply_markup=get_main_menu(user.language)
        )
    except Exception as e:
        session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –≤ decline_task: {str(e)}", exc_info=True)
        await message.answer(
            translations["error"],
            parse_mode="HTML",
            reply_markup=get_admin_menu(language)
        )
    finally:
        session.close()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
def get_main_menu(language: str) -> ReplyKeyboardMarkup:
    translations = TRANSLATIONS.get(language, TRANSLATIONS["ru"])
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üé∞ –°–ª–æ—Ç—ã üé∞"), KeyboardButton(text="üé≤ –ö–æ—Å—Ç–∏ üé≤")],
            [KeyboardButton(text="üÉè –ë–ª—ç–∫–¥–∂–µ–∫ üé¥"), KeyboardButton(text="ü™ô –û—Ä—ë–ª –∏ –†–µ—à–∫–∞ ü™ô")],
            [KeyboardButton(text="üí£ –ú–∏–Ω—ã üí£"), KeyboardButton(text="üé° –†—É–ª–µ—Ç–∫–∞ üé°")],
            [KeyboardButton(text="üé≤ –ë–æ–ª—å—à–µ/–ú–µ–Ω—å—à–µ 7 üé≤"), KeyboardButton(text="üé® –£–≥–∞–¥–∞–π –¶–≤–µ—Ç üé®")],
            [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å üìä"), KeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å üí≥")],
            [KeyboardButton(text="üí∏ –ü–æ–ø–æ–ª–Ω–∏—Ç—å üì©"), KeyboardButton(text="üí∏ –í—ã–≤–µ—Å—Ç–∏ üí≥")],
            [KeyboardButton(text="üéÅ –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥"), KeyboardButton(text="üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å")],
            [KeyboardButton(text="üìã –ó–∞–¥–∞–Ω–∏—è")]
        ],
        resize_keyboard=True
    )

# –ó–∞–ø—É—Å–∫ –∞–¥–º–∏–Ω-–±–æ—Ç–∞
async def main():
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –∞–¥–º–∏–Ω-–±–æ—Ç–∞...")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}", exc_info=True)

if __name__ == "__main__":
    asyncio.run(main())