import asyncio
import logging
import random
import re 
import string
import json
import html
from datetime import datetime, timedelta
from typing import Dict, Any
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandStart, BaseFilter
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from sqlalchemy.orm import Session
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    ReplyKeyboardMarkup, 
    KeyboardButton, 
    InlineKeyboardMarkup, 
    InlineKeyboardButton,
    Message,
    CallbackQuery,
    ChatMember
)
from sqlalchemy import create_engine, Column, Integer, String, Float, Boolean, DateTime, ForeignKey
from sqlalchemy.orm import sessionmaker, relationship, declarative_base
from sqlalchemy.exc import SQLAlchemyError


# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥ —Å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏
class RegexpCommandsFilter(BaseFilter):
    def __init__(self, regexp_commands: list[str]):
        self.regexp_commands = regexp_commands

    async def __call__(self, message: Message) -> bool | dict:
        if message.text is None:
            return False
        for regexp in self.regexp_commands:
            match = re.match(regexp, message.text)
            if match:
                return {"regexp_command": match}
        return False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = "7774081383:AAGCn5ayceHhXVJ9p02n1qlJj9GUSzqYiGY"  # –í–∞—à —Ç–æ–∫–µ–Ω
ADMIN_CHAT_ID = 7566465615  # –í–∞—à ID –≤ Telegram
ADMIN_USERNAME = "@win_betuz"
CHANNEL_LINK = "https://t.me/WINBETPROMO"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
processed_messages = set()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
engine = create_engine("sqlite:///betting.db", echo=False)
Base = declarative_base()

# –ú–æ–¥–µ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
class User(Base):
    __tablename__ = "users"
    id = Column(Integer, primary_key=True)
    telegram_id = Column(Integer, unique=True)
    username = Column(String)
    phone = Column(String)
    balance = Column(Float, default=0.0)
    language = Column(String, default="ru")
    referral_id = Column(Integer)
    referral_earnings = Column(Float, default=0.0)
    total_winnings = Column(Float, default=0.0)
    game_count = Column(Integer, default=0)
    is_banned = Column(Boolean, default=False)
    deposit_count = Column(Integer, default=0)
    total_deposits = Column(Float, default=0.0)
    withdrawal_count = Column(Integer, default=0)
    total_withdrawals = Column(Float, default=0.0)
    last_daily = Column(DateTime)
    always_win = Column(Boolean, default=False)
    total_bets = Column(Float, default=0.0)
    promos = relationship("UserPromoCode", back_populates="user")
    tasks = relationship("UserTask", back_populates="user")

class PromoCode(Base):
    __tablename__ = "promo_codes"
    id = Column(Integer, primary_key=True)
    code = Column(String, unique=True)
    amount = Column(Float)
    uses_remaining = Column(Integer)
    created_by = Column(Integer)
    users = relationship("UserPromoCode", back_populates="promo_code")

class UserPromoCode(Base):
    __tablename__ = "user_promo_codes"
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey("users.id"))
    promo_code_id = Column(Integer, ForeignKey("promo_codes.id"))
    user = relationship("User", back_populates="promos")
    promo_code = relationship("PromoCode", back_populates="users")

class Task(Base):
    __tablename__ = "tasks"
    id = Column(Integer, primary_key=True)
    task_type = Column(String)
    reward = Column(Float)
    link = Column(String)
    min_followers = Column(Integer, default=0)
    active = Column(Boolean, default=True)
    users = relationship("UserTask", back_populates="task")

class UserTask(Base):
    __tablename__ = "user_tasks"
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey("users.id"))
    task_id = Column(Integer, ForeignKey("tasks.id"))
    status = Column(String, default="pending")
    submission = Column(String)
    user = relationship("User", back_populates="tasks")
    task = relationship("Task", back_populates="users")

class WithdrawRequest(Base):
    __tablename__ = "withdraw_requests"
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer)
    amount = Column(Float)
    method = Column(String)
    details = Column(String)
    status = Column(String, default="pending")
    timestamp = Column(DateTime, default=datetime.utcnow)

Base.metadata.create_all(engine)
logger.debug("–¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω—ã")
Session = sessionmaker(bind=engine)

# –ü–µ—Ä–µ–≤–æ–¥—ã
TRANSLATIONS = {
    "ru": {
        "welcome": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {}! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –∫–∞–Ω–∞–ª—É: {}\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "welcome_back": "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {}! –í–∞—à –±–∞–ª–∞–Ω—Å: {:.2f} —Å—É–º",
        "language_selected": "–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –†—É—Å—Å–∫–∏–π",
        "enter_phone": "üì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        "registration_success": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\nID: {}\n–ë–æ—Ç: @{}\n–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: {}\n–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!",
        "welcome_bonus": "üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å: {:.2f} —Å—É–º!",
        "referral_bonus": "üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å {} —Å—É–º –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ {}!",
        "new_user_notification": "–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\nID: {}\n–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID: {}\n–ò–º—è: {}\n–¢–µ–ª–µ—Ñ–æ–Ω: {}\n–Ø–∑—ã–∫: {}\n–†–µ—Ñ–µ—Ä–∞–ª: {}",
        "balance": "üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {:.2f} —Å—É–º",
        "invalid_bet": "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏! –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 1000 —Å—É–º, –≤–∞—à –±–∞–ª–∞–Ω—Å: {:.2f} —Å—É–º",
        "insufficient_balance": "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –í–∞—à –±–∞–ª–∞–Ω—Å: {:.2f} —Å—É–º",
        "bet_prompt": "üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–º–∏–Ω–∏–º—É–º 1000 —Å—É–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, 1500.0):",
        "dice_start": "üé≤ –í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6:",
        "dice_win": "üéâ –í—ã —É–≥–∞–¥–∞–ª–∏! –í—ã–ø–∞–ª–æ: {}. –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: {:.2f} —Å—É–º. –í–∞—à –±–∞–ª–∞–Ω—Å: {:.2f} —Å—É–º",
        "dice_lose": "üòî –í—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏. –í—ã–ø–∞–ª–æ: {}. –í–∞—à –±–∞–ª–∞–Ω—Å: {:.2f} —Å—É–º",
        "slots_start": "üé∞ –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –∫—Ä—É—Ç–∏—Ç—å —Å–ª–æ—Ç—ã!",
        "slots_result": "üé∞ –†–µ–∑—É–ª—å—Ç–∞—Ç: {}\n{} –í–∞—à –±–∞–ª–∞–Ω—Å: {:.2f} —Å—É–º",
        "blackjack_start": "üÉè –í–∞—à–∏ –∫–∞—Ä—Ç—ã: {}. –°—É–º–º–∞: {}\n–•–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å –µ—â—ë –∫–∞—Ä—Ç—É?",
        "blackjack_win": "üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: {:.2f} —Å—É–º! –í–∞—à –±–∞–ª–∞–Ω—Å: {:.2f} —Å—É–º",
        "blackjack_lose": "üòî –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –î–∏–ª–µ—Ä: {}. –í–∞—à –±–∞–ª–∞–Ω—Å: {:.2f} —Å—É–º",
        "blackjack_bust": "üòî –ü–µ—Ä–µ–±–æ—Ä! –°—É–º–º–∞: {}. –í–∞—à –±–∞–ª–∞–Ω—Å: {:.2f} —Å—É–º",
        "coinflip_start": "ü™ô –í—ã–±–µ—Ä–∏—Ç–µ: –û—Ä—ë–ª –∏–ª–∏ –†–µ—à–∫–∞?",
        "coinflip_win": "üéâ –í—ã —É–≥–∞–¥–∞–ª–∏: {}! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: {:.2f} —Å—É–º. –í–∞—à –±–∞–ª–∞–Ω—Å: {:.2f} —Å—É–º",
        "coinflip_lose": "üòî –ù–µ —É–≥–∞–¥–∞–ª–∏: {}. –í–∞—à –±–∞–ª–∞–Ω—Å: {:.2f} —Å—É–º",
        "mines_start": "üí£ –í—ã–±–µ—Ä–∏—Ç–µ —è—á–µ–π–∫—É –Ω–∞ –ø–æ–ª–µ 3x3 (3 –º–∏–Ω—ã):",
        "mines_win": "‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —è—á–µ–π–∫–∞! –¢–µ–∫—É—â–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å: {:.2f}x. –ë–∞–ª–∞–Ω—Å: {:.2f} —Å—É–º",
        "mines_lose": "üí• –í—ã –ø–æ–ø–∞–ª–∏ –Ω–∞ –º–∏–Ω—É! –í–∞—à –±–∞–ª–∞–Ω—Å: {:.2f} —Å—É–º",
        "mines_cashout": "üéâ –í—ã –∑–∞–±—Ä–∞–ª–∏ –≤—ã–∏–≥—Ä—ã—à! –ú–Ω–æ–∂–∏—Ç–µ–ª—å: {:.2f}x, –í—ã–∏–≥—Ä—ã—à: {:.2f} —Å—É–º, –ë–∞–ª–∞–Ω—Å: {:.2f} —Å—É–º",
        "roulette_start": "üé° –í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç: –ö—Ä–∞—Å–Ω–æ–µ, –ß—ë—Ä–Ω–æ–µ –∏–ª–∏ –ó–µ–ª—ë–Ω–æ–µ",
        "roulette_win": "üéâ –í—ã —É–≥–∞–¥–∞–ª–∏: {}! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: {:.2f} —Å—É–º. –í–∞—à –±–∞–ª–∞–Ω—Å: {:.2f} —Å—É–º",
        "roulette_lose": "üòî –ù–µ —É–≥–∞–¥–∞–ª–∏: {}. –í–∞—à –±–∞–ª–∞–Ω—Å: {:.2f} —Å—É–º",
        "overunder_start": "üé≤ –ë–æ–ª—å—à–µ –∏–ª–∏ –ú–µ–Ω—å—à–µ 7?",
        "overunder_win": "üéâ –í—ã —É–≥–∞–¥–∞–ª–∏! –°—É–º–º–∞: {}. –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: {:.2f} —Å—É–º. –í–∞—à –±–∞–ª–∞–Ω—Å: {:.2f} —Å—É–º",
        "overunder_lose": "üòî –ù–µ —É–≥–∞–¥–∞–ª–∏. –°—É–º–º–∞: {}. –í–∞—à –±–∞–ª–∞–Ω—Å: {:.2f} —Å—É–º",
        "guesscolor_start": "üé® –£–≥–∞–¥–∞–π—Ç–µ —Ü–≤–µ—Ç: –ö—Ä–∞—Å–Ω—ã–π, –°–∏–Ω–∏–π, –ñ—ë–ª—Ç—ã–π, –ó–µ–ª—ë–Ω—ã–π",
        "guesscolor_win": "üéâ –í—ã —É–≥–∞–¥–∞–ª–∏: {}! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: {:.2f} —Å—É–º. –í–∞—à –±–∞–ª–∞–Ω—Å: {:.2f} —Å—É–º",
        "guesscolor_lose": "üòî –ù–µ —É–≥–∞–¥–∞–ª–∏: {}. –í–∞—à –±–∞–ª–∞–Ω—Å: {:.2f} —Å—É–º",
        "enter_promo": "üéÅ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:",
        "promo_success": "üéâ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í—ã –ø–æ–ª—É—á–∏–ª–∏: {:.2f} —Å—É–º. –í–∞—à –±–∞–ª–∞–Ω—Å: {:.2f} —Å—É–º",
        "promo_invalid": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –∏–ª–∏ –æ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!",
        "daily_bonus": "üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: {:.2f} —Å—É–º! –í–∞—à –±–∞–ª–∞–Ω—Å: {:.2f} —Å—É–º",
        "daily_already_claimed": "‚ùå –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è!",
        "deposit_method": "üí∏ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
        "deposit_amount": "üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–º–∏–Ω–∏–º—É–º 1000 —Å—É–º):",
        "deposit_details": "üí∏ –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏–ª–∏ –∫–æ—à–µ–ª—å–∫–∞):",
        "deposit_success": "‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {} —Å—É–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É! –í–∞—à –±–∞–ª–∞–Ω—Å: {:.2f} —Å—É–º",
        "withdraw_method": "üí∏ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞:",
        "withdraw_amount": "üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞ (–º–∏–Ω–∏–º—É–º 1000 —Å—É–º):",
        "withdraw_details": "üí∏ –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏–ª–∏ –∫–æ—à–µ–ª—å–∫–∞):",
        "withdraw_success": "‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ {} —Å—É–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É! –í–∞—à –±–∞–ª–∞–Ω—Å: {:.2f} —Å—É–º",
        "withdraw_bonus_restriction": "‚ùå –î–ª—è –≤—ã–≤–æ–¥–∞ –±–æ–Ω—É—Å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–¥–µ–ª–∞–π—Ç–µ –¥–µ–ø–æ–∑–∏—Ç –∏ –ø—Ä–æ–∫—Ä—É—Ç–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—Ç–∞–≤–∫–∞—Ö —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º –º–∏–Ω–∏–º—É–º 1.1!",
        "withdraw_no_bets": "‚ùå –°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É —Å–≤–æ–∏–º –±–∞–ª–∞–Ω—Å–æ–º —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º –º–∏–Ω–∏–º—É–º 1.1!",
        "admin_deposit_request": "üí∏ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!\nID: {}\n–ò–º—è: {}\n–°—É–º–º–∞: {} —Å—É–º\n–ú–µ—Ç–æ–¥: {}\n–†–µ–∫–≤–∏–∑–∏—Ç—ã: {}\n\n–û–¥–æ–±—Ä–∏—Ç—å: /approve_deposit_{}_{}\n–û—Ç–∫–ª–æ–Ω–∏—Ç—å: /decline_deposit_{}_{}",
        "admin_withdraw_request": "üí∏ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥!\nID: {}\n–ò–º—è: {}\n–°—É–º–º–∞: {} —Å—É–º\n–ú–µ—Ç–æ–¥: {}\n–†–µ–∫–≤–∏–∑–∏—Ç—ã: {}\n\n–û–¥–æ–±—Ä–∏—Ç—å: /approve_withdraw_{}_{}\n–û—Ç–∫–ª–æ–Ω–∏—Ç—å: /decline_withdraw_{}_{}",
        "admin_deposit_approve": "‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {} —Å—É–º –¥–ª—è {} –æ–¥–æ–±—Ä–µ–Ω–æ! –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {:.2f} —Å—É–º",
        "admin_deposit_decline": "‚ùå –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {} —Å—É–º –¥–ª—è {} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ!",
        "admin_withdraw_approve": "‚úÖ –í—ã–≤–æ–¥ –Ω–∞ {} —Å—É–º –¥–ª—è {} –æ–¥–æ–±—Ä–µ–Ω! –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {:.2f} —Å—É–º",
        "admin_withdraw_decline": "‚ùå –í—ã–≤–æ–¥ –Ω–∞ {} —Å—É–º –¥–ª—è {} –æ—Ç–∫–ª–æ–Ω—ë–Ω!",
        "profile": "üë§ –ü—Ä–æ—Ñ–∏–ª—å:\nID: {}\n–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–π: {}\n–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π: {:.2f} —Å—É–º\n–í—ã–≤–æ–¥–æ–≤: {}\n–°—É–º–º–∞ –≤—ã–≤–æ–¥–æ–≤: {:.2f} —Å—É–º\n–í—ã–∏–≥—Ä—ã—à–µ–π: {:.2f} —Å—É–º\n–ë–∞–ª–∞–Ω—Å: {:.2f} —Å—É–º",
        "tasks_menu": "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:\n1. –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Telegram-–∫–∞–Ω–∞–ª: 700 —Å—É–º\n2. –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Instagram: 1000 —Å—É–º\n3. –†–µ–ø–æ—Å—Ç –ø–æ—Å—Ç–∞/–≤–∏–¥–µ–æ: 3000 —Å—É–º\n4. –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª WINBETPROMO: 500 —Å—É–º\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ:",
        "task_telegram_sub": "üì© –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {} –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'.",
        "task_instagram_sub": "üì∏ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ Instagram {} –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.",
        "task_repost": "üì¢ –°–¥–µ–ª–∞–π—Ç–µ —Ä–µ–ø–æ—Å—Ç {} –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏—Å—Ç–æ—Ä–∏—é.",
        "task_check_subscription": "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
        "task_submit_nickname": "üì© –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à Instagram –Ω–∏–∫",
        "task_submit_repost": "üì© –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–ø–æ—Å—Ç",
        "task_success": "‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {} —Å—É–º. –í–∞—à –±–∞–ª–∞–Ω—Å: {:.2f} —Å—É–º",
        "task_already_completed": "‚ùå –í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ!",
        "task_invalid_submission": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–∏–∫ –∏–ª–∏ —Å—Å—ã–ª–∫—É.",
        "task_instagram_low_followers": "‚ùå –í–∞—à Instagram –∞–∫–∫–∞—É–Ω—Ç –∏–º–µ–µ—Ç –º–µ–Ω–µ–µ 20 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤!",
        "task_not_subscribed": "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        "admin_task_request": "üìã –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ!\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {}\n–ò–º—è: {}\n–¢–∏–ø –∑–∞–¥–∞–Ω–∏—è: {}\n–û—Ç–ø—Ä–∞–≤–∫–∞: {}\n–ù–∞–≥—Ä–∞–¥–∞: {} —Å—É–º\nID –∑–∞–¥–∞–Ω–∏—è: {}\nID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}",
        "task_submit": "üìã –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–∞—à Instagram –Ω–∏–∫):",
        "task_already_submitted": "‚ùå –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!",
        "tasks_none": "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç!",
        "error": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        "admin_menu": "üë®‚Äçüíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        "admin_stats": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {}\n–ê–∫—Ç–∏–≤–Ω—ã—Ö: {}\n–ë–∞–ª–∞–Ω—Å —Å–∏—Å—Ç–µ–º—ã: {:.2f} —Å—É–º",
        "admin_user_info": "üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\nID: {}\n–ò–º—è: {}\n–ë–∞–ª–∞–Ω—Å: {:.2f} —Å—É–º\n–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–π: {}\n–í—ã–≤–æ–¥–æ–≤: {}\n–†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {}",
        "admin_user_not_found": "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!",
        "admin_balance_changed": "‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {:.2f} —Å—É–º. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {:.2f} —Å—É–º",
        "admin_promocode_created": "üéü –°–æ–∑–¥–∞–Ω –ø—Ä–æ–º–æ–∫–æ–¥: {}\n–°—É–º–º–∞: {:.2f} —Å—É–º\n–ê–∫—Ç–∏–≤–∞—Ü–∏–π: {}",
        "admin_promocode_list": "üìã –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:\n{}",
        "admin_broadcast_started": "üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞! –û—Ö–≤–∞—Ç: {} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        "admin_broadcast_completed": "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {}\n–ù–µ —É–¥–∞–ª–æ—Å—å: {}",
        "admin_help": (
            "üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞–º:\n"
            "/add_balance [id] [sum] - –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
            "/withdraw_balance [id] [sum] - –°–Ω—è—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞\n"
            "/create_promocode [sum] [uses] - –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥\n"
            "/user_info [id] - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n"
            "/broadcast - –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É\n"
            "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"
        ),
        "broadcast_prompt": "üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
        "deposit_prompt": "üí≥ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 123456789 1000):",
        "withdraw_prompt": "üí∏ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 123456789 1000):",
        "promocode_prompt": "üéü –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5000 10):",
        "not_admin": "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!"
    },
    "en": {
        "welcome": "Welcome, {}! Join our channel: {}\nChoose a language:",
        "welcome_back": "Welcome back, {}! Your balance: {:.2f} UZS",
        "language_selected": "Language set: English",
        "enter_phone": "üì± Please send your phone number by clicking the button below:",
        "registration_success": "Registration completed!\nID: {}\nBot: @{}\nYour referral code: {}\nInvite friends and earn bonuses!",
        "welcome_bonus": "üéâ You received a welcome bonus: {:.2f} UZS!",
        "referral_bonus": "üéâ You received a bonus of {} UZS for inviting {}!",
        "new_user_notification": "New user!\nID: {}\nInternal ID: {}\nName: {}\nPhone: {}\nLanguage: {}\nReferral: {}",
        "balance": "üí∞ Your balance: {:.2f} UZS",
        "invalid_bet": "‚ùå Invalid bet amount! Minimum bet is 1000 UZS, your balance: {:.2f} UZS",
        "insufficient_balance": "‚ùå Insufficient funds! Your balance: {:.2f} UZS",
        "bet_prompt": "üí∏ Enter the bet amount (minimum 1000 UZS, e.g., 1500.0):",
        "dice_start": "üé≤ Choose a number from 1 to 6:",
        "dice_win": "üéâ You guessed it! Rolled: {}. You won: {:.2f} UZS. Your balance: {:.2f} UZS",
        "dice_lose": "üòî You didn't guess it. Rolled: {}. Your balance: {:.2f} UZS",
        "slots_start": "üé∞ Press to spin the slots!",
        "slots_result": "üé∞ Result: {}\n{} Your balance: {:.2f} UZS",
        "blackjack_start": "üÉè Your cards: {}. Total: {}\nWould you like to hit?",
        "blackjack_win": "üéâ You won: {:.2f} UZS! Your balance: {:.2f} UZS",
        "blackjack_lose": "üòî You lost. Dealer: {}. Your balance: {:.2f} UZS",
        "blackjack_bust": "üòî Bust! Total: {}. Your balance: {:.2f} UZS",
        "coinflip_start": "ü™ô Choose: Heads or Tails?",
        "coinflip_win": "üéâ You guessed it: {}! You won: {:.2f} UZS. Your balance: {:.2f} UZS",
        "coinflip_lose": "üòî You didn't guess it: {}. Your balance: {:.2f} UZS",
        "mines_start": "üí£ Choose a cell on the 3x3 grid (3 mines):",
        "mines_win": "‚úÖ Safe cell! Current multiplier: {:.2f}x. Balance: {:.2f} UZS",
        "mines_lose": "üí• You hit a mine! Your balance: {:.2f} UZS",
        "mines_cashout": "üéâ You cashed out! Multiplier: {:.2f}x, Winnings: {:.2f} UZS, Balance: {:.2f} UZS",
        "roulette_start": "üé° Choose a color: Red, Black, or Green",
        "roulette_win": "üéâ You guessed it: {}! You won: {:.2f} UZS. Your balance: {:.2f} UZS",
        "roulette_lose": "üòî You didn't guess it: {}. Your balance: {:.2f} UZS",
        "overunder_start": "üé≤ Over or Under 7?",
        "overunder_win": "üéâ You guessed it! Sum: {}. You won: {:.2f} UZS. Your balance: {:.2f} UZS",
        "overunder_lose": "üòî You didn't guess it. Sum: {}. Your balance: {:.2f} UZS",
        "guesscolor_start": "üé® Guess the color: Red, Blue, Yellow, Green",
        "guesscolor_win": "üéâ You guessed it: {}! You won: {:.2f} UZS. Your balance: {:.2f} UZS",
        "guesscolor_lose": "üòî You didn't guess it: {}. Your balance: {:.2f} UZS",
        "enter_promo": "üéÅ Enter promo code:",
        "promo_success": "üéâ Promo code activated! You received: {:.2f} UZS. Your balance: {:.2f} UZS",
        "promo_invalid": "‚ùå Invalid promo code or already used!",
        "daily_bonus": "üéÅ You received a daily bonus: {:.2f} UZS! Your balance: {:.2f} UZS",
        "daily_already_claimed": "‚ùå You already claimed the daily bonus today!",
        "deposit_method": "üí∏ Choose deposit method:",
        "deposit_amount": "üí∏ Enter deposit amount (minimum 1000 UZS):",
        "deposit_details": "üí∏ Enter deposit details (e.g., card or wallet number):",
        "deposit_success": "‚úÖ Deposit request for {} UZS sent to admin! Your balance: {:.2f} UZS",
        "withdraw_method": "üí∏ Choose withdrawal method:",
        "withdraw_amount": "üí∏ Enter withdrawal amount (minimum 1000 UZS):",
        "withdraw_details": "üí∏ Enter withdrawal details (e.g., card or wallet number):",
        "withdraw_success": "‚úÖ Withdrawal request for {} UZS sent to admin! Your balance: {:.2f} UZS",
        "withdraw_bonus_restriction": "‚ùå To withdraw bonus balance, make a deposit and wager with a minimum odds of 1.1!",
        "withdraw_no_bets": "‚ùå Place a bet with your balance with minimum odds of 1.1!",
        "admin_deposit_request": "üí∏ New deposit request!\nID: {}\nName: {}\nAmount: {} UZS\nMethod: {}\nDetails: {}\n\nApprove: /approve_deposit_{}_{}\nDecline: /decline_deposit_{}_{}",
        "admin_withdraw_request": "üí∏ New withdrawal request!\nID: {}\nName: {}\nAmount: {} UZS\nMethod: {}\nDetails: {}\n\nApprove: /approve_withdraw_{}_{}\nDecline: /decline_withdraw_{}_{}",
        "admin_deposit_approve": "‚úÖ Deposit of {} UZS for {} approved! New balance: {:.2f} UZS",
        "admin_deposit_decline": "‚ùå Deposit of {} UZS for {} declined!",
        "admin_withdraw_approve": "‚úÖ Withdrawal of {} UZS for {} approved! New balance: {:.2f} UZS",
        "admin_withdraw_decline": "‚ùå Withdrawal of {} UZS for {} declined!",
        "profile": "üë§ Profile:\nID: {}\nDeposits: {}\nTotal Deposits: {:.2f} UZS\nWithdrawals: {}\nTotal Withdrawals: {:.2f} UZS\nWinnings: {:.2f} UZS\nBalance: {:.2f} UZS",
        "tasks_menu": "üìã Available tasks:\n1. Subscribe to Telegram channel: 700 UZS\n2. Subscribe to Instagram: 1000 UZS\n3. Repost post/video: 3000 UZS\n4. Subscribe to WINBETPROMO channel: 500 UZS\nChoose a task:",
        "task_telegram_sub": "üì© Subscribe to the channel {} and click 'Check Subscription'.",
        "task_instagram_sub": "üì∏ Follow Instagram {} and send your username for verification.",
        "task_repost": "üì¢ Repost {} and send the link to the story.",
        "task_check_subscription": "üîç Check Subscription",
        "task_submit_nickname": "üì© Send your Instagram username",
        "task_submit_repost": "üì© Send the repost link",
        "task_success": "‚úÖ Task completed! You received {} UZS. Your balance: {:.2f} UZS",
        "task_already_completed": "‚ùå You already completed this task!",
        "task_invalid_submission": "‚ùå Invalid data! Send a valid username or link.",
        "task_instagram_low_followers": "‚ùå Your Instagram account has fewer than 20 followers!",
        "task_not_subscribed": "‚ùå You are not subscribed to the channel! Subscribe and try again.",
        "admin_task_request": "üìã New task request!\nUser: {}\nName: {}\nTask type: {}\nSubmission: {}\nReward: {} UZS\nTask ID: {}\nUser ID: {}",
        "task_submit": "üìã Submit the task details (e.g., your Instagram username):",
        "task_already_submitted": "‚ùå You have already submitted this task for review!",
        "tasks_none": "‚ùå No tasks available at the moment!",
        "error": "‚ùå An error occurred! Please try again later.",
        "admin_menu": "üë®‚Äçüíª Admin Panel\nChoose action:",
        "admin_stats": "üìä Bot statistics:\nUsers: {}\nActive: {}\nSystem balance: {:.2f} UZS",
        "admin_user_info": "üë§ User info:\nID: {}\nName: {}\nBalance: {:.2f} UZS\nDeposits: {}\nWithdrawals: {}\nReferrals: {}",
        "admin_user_not_found": "‚ùå User not found!",
        "admin_balance_changed": "‚úÖ User {} balance changed by {:.2f} UZS. New balance: {:.2f} UZS",
        "admin_promocode_created": "üéü Promo code created: {}\nAmount: {:.2f} UZS\nActivations: {}",
        "admin_promocode_list": "üìã Active promo codes list:\n{}",
        "admin_broadcast_started": "üì¢ Broadcast started! Reach: {} users",
        "admin_broadcast_completed": "‚úÖ Broadcast completed!\nSent: {}\nFailed: {}",
        "admin_help": (
            "üìö Admin commands help:\n"
            "/add_balance [id] [sum] - Add balance\n"
            "/withdraw_balance [id] [sum] - Withdraw funds\n"
            "/create_promocode [sum] [uses] - Create promo code\n"
            "/user_info [id] - Get user info\n"
            "/broadcast - Make broadcast\n"
            "/stats - Bot statistics"
        ),
        "broadcast_prompt": "üì¢ Enter the text for broadcasting to all users:",
        "deposit_prompt": "üí≥ Enter user ID and deposit amount (e.g., 123456789 1000):",
        "withdraw_prompt": "üí∏ Enter user ID and withdrawal amount (e.g., 123456789 1000):",
        "promocode_prompt": "üéü Enter amount and number of activations for the promo code (e.g., 5000 10):",
        "not_admin": "‚ùå You do not have admin privileges!"
    }
}
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_language_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–†—É—Å—Å–∫–∏–π üá∑üá∫"), KeyboardButton(text="English üá¨üáß")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_phone_keyboard(language: str) -> ReplyKeyboardMarkup:
    translations = TRANSLATIONS.get(language, TRANSLATIONS["ru"])
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=translations["enter_phone"], request_contact=True)]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_main_menu(language: str) -> ReplyKeyboardMarkup:
    translations = TRANSLATIONS.get(language, TRANSLATIONS["ru"])
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üé∞ –°–ª–æ—Ç—ã üé∞"), KeyboardButton(text="üé≤ –ö–æ—Å—Ç–∏ üé≤")],
            [KeyboardButton(text="üÉè –ë–ª—ç–∫–¥–∂–µ–∫ üé¥"), KeyboardButton(text="ü™ô –û—Ä—ë–ª –∏ –†–µ—à–∫–∞ ü™ô")],
            [KeyboardButton(text="üí£ –ú–∏–Ω—ã üí£"), KeyboardButton(text="üé° –†—É–ª–µ—Ç–∫–∞ üé°")],
            [KeyboardButton(text="üé≤ –ë–æ–ª—å—à–µ/–ú–µ–Ω—å—à–µ 7 üé≤"), KeyboardButton(text="üé® –£–≥–∞–¥–∞–π –¶–≤–µ—Ç üé®")],
            [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å üìä"), KeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å üí≥")],
            [KeyboardButton(text="üí∏ –ü–æ–ø–æ–ª–Ω–∏—Ç—å üì©"), KeyboardButton(text="üí∏ –í—ã–≤–µ—Å—Ç–∏ üí≥")],
            [KeyboardButton(text="üéÅ –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥"), KeyboardButton(text="üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å")],
            [KeyboardButton(text="üìã –ó–∞–¥–∞–Ω–∏—è")]
        ],
        resize_keyboard=True
    )

def get_tasks_menu(language: str) -> InlineKeyboardMarkup:
    translations = TRANSLATIONS.get(language, TRANSLATIONS["ru"])
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Telegram (700 —Å—É–º)", callback_data="task_telegram_sub")],
        [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Instagram (1000 —Å—É–º)", callback_data="task_instagram_sub")],
        [InlineKeyboardButton(text="–†–µ–ø–æ—Å—Ç (3000 —Å—É–º)", callback_data="task_repost")],
        [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ WINBETPROMO (500 —Å—É–º)", callback_data="task_winbetpromo_sub")]
    ])

def get_task_check_keyboard(task_id: int, language: str) -> InlineKeyboardMarkup:
    translations = TRANSLATIONS.get(language, TRANSLATIONS["ru"])
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=translations["task_check_subscription"], callback_data=f"check_task_{task_id}")]
    ])

def get_task_submit_keyboard(task_id: int, language: str, submit_type: str) -> InlineKeyboardMarkup:
    translations = TRANSLATIONS.get(language, TRANSLATIONS["ru"])
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=translations[f"task_submit_{submit_type}"], callback_data=f"submit_task_{task_id}")]
    ])

def get_dice_keyboard(language: str) -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="1"), KeyboardButton(text="2"), KeyboardButton(text="3")],
            [KeyboardButton(text="4"), KeyboardButton(text="5"), KeyboardButton(text="6")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_slots_keyboard(language: str) -> InlineKeyboardMarkup:
    translations = TRANSLATIONS.get(language, TRANSLATIONS["ru"])
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé∞ –ö—Ä—É—Ç–∏—Ç—å", callback_data="spin")]
    ])

def get_blackjack_hit_keyboard(language: str) -> ReplyKeyboardMarkup:
    translations = TRANSLATIONS.get(language, TRANSLATIONS["ru"])
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–î–∞" if language == "ru" else "Yes"),
             KeyboardButton(text="–ù–µ—Ç" if language == "ru" else "No")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_coinflip_keyboard(language: str) -> ReplyKeyboardMarkup:
    translations = TRANSLATIONS.get(language, TRANSLATIONS["ru"])
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–û—Ä—ë–ª" if language == "ru" else "Heads"),
             KeyboardButton(text="–†–µ—à–∫–∞" if language == "ru" else "Tails")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_mines_keyboard(grid: list, multiplier: float, game_over: bool = False, language: str = "ru") -> InlineKeyboardMarkup:
    translations = TRANSLATIONS.get(language, TRANSLATIONS["ru"])
    buttons = []
    for i in range(3):
        row = []
        for j in range(3):
            idx = i * 3 + j
            text = "üí£" if game_over and grid[idx] == 1 else "‚úÖ" if grid[idx] == 2 else "‚¨ú"
            row.append(InlineKeyboardButton(text=text, callback_data=f"mines_{idx}" if not game_over and grid[idx] == 0 else "none"))
        buttons.append(row)
    if not game_over:
        buttons.append([InlineKeyboardButton(text=f"–ó–∞–±—Ä–∞—Ç—å ({multiplier:.2f}x)", callback_data="mines_cashout")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_roulette_keyboard(language: str) -> ReplyKeyboardMarkup:
    translations = TRANSLATIONS.get(language, TRANSLATIONS["ru"])
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ö—Ä–∞—Å–Ω–æ–µ" if language == "ru" else "Red"),
             KeyboardButton(text="–ß—ë—Ä–Ω–æ–µ" if language == "ru" else "Black")],
            [KeyboardButton(text="–ó–µ–ª—ë–Ω–æ–µ" if language == "ru" else "Green")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_overunder_keyboard(language: str) -> ReplyKeyboardMarkup:
    translations = TRANSLATIONS.get(language, TRANSLATIONS["ru"])
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ë–æ–ª—å—à–µ" if language == "ru" else "Over"),
             KeyboardButton(text="–ú–µ–Ω—å—à–µ" if language == "ru" else "Under")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_guesscolor_keyboard(language: str) -> ReplyKeyboardMarkup:
    translations = TRANSLATIONS.get(language, TRANSLATIONS["ru"])
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ö—Ä–∞—Å–Ω—ã–π" if language == "ru" else "Red"),
             KeyboardButton(text="–°–∏–Ω–∏–π" if language == "ru" else "Blue")],
            [KeyboardButton(text="–ñ—ë–ª—Ç—ã–π" if language == "ru" else "Yellow"),
             KeyboardButton(text="–ó–µ–ª—ë–Ω—ã–π" if language == "ru" else "Green")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_balance_menu(language: str) -> ReplyKeyboardMarkup:
    translations = TRANSLATIONS.get(language, TRANSLATIONS["ru"])
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üí∏ –ü–æ–ø–æ–ª–Ω–∏—Ç—å üì©"), KeyboardButton(text="üí∏ –í—ã–≤–µ—Å—Ç–∏ üí≥")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

def get_deposit_method_keyboard(language: str) -> ReplyKeyboardMarkup:
    translations = TRANSLATIONS.get(language, TRANSLATIONS["ru"])
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ üí≥" if language == "ru" else "Bank Card üí≥"),
             KeyboardButton(text="–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∫–æ—à–µ–ª—ë–∫ üí∏" if language == "ru" else "E-Wallet üí∏")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_withdraw_method_keyboard(language: str) -> ReplyKeyboardMarkup:
    translations = TRANSLATIONS.get(language, TRANSLATIONS["ru"])
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ üí≥" if language == "ru" else "Bank Card üí≥"),
             KeyboardButton(text="–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∫–æ—à–µ–ª—ë–∫ üí∏" if language == "ru" else "E-Wallet üí∏")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class RegisterState(StatesGroup):
    language = State()
    phone = State()

class GameState(StatesGroup):
    bet = State()
    dice_choice = State()
    slots_spin = State()
    blackjack_hit = State()
    coinflip_choice = State()
    mines_cell = State()
    roulette_choice = State()
    overunder_choice = State()
    guesscolor_choice = State()

class TransactionState(StatesGroup):
    deposit_method = State()
    deposit_amount = State()
    deposit_details = State()
    withdraw_method = State()
    withdraw_amount = State()
    withdraw_details = State()
    promo_code = State()

class TaskState(StatesGroup):
    select_task = State()
    submit_task = State()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
async def check_channel_subscription(user_id: int, channel_username: str) -> bool:
    try:
        channel = await bot.get_chat(channel_username)
        member = await bot.get_chat_member(channel.id, user_id)
        return member.status in ["member", "administrator", "creator"]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {str(e)}")
        return False

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∞–Ω—Å–∞ –≤—ã–∏–≥—Ä—ã—à–∞
def get_win_chance(user: User, admin_id: int) -> float:
    if user.telegram_id == admin_id or user.always_win:
        return 1.0
    if user.deposit_count == 0:
        return 0.1
    return 0.3

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç {message.from_user.id}")
    session = Session()
    try:
        user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
        referral_id = None
        if message.text.startswith("/start ") and len(message.text.split()) > 1:
            try:
                referral_id = int(message.text.split()[1])
            except ValueError:
                pass
        if user:
            translations = TRANSLATIONS.get(user.language, TRANSLATIONS["ru"])
            await bot.send_message(
                chat_id=message.chat.id,
                text=translations["welcome_back"].format(user.username or "User", user.balance),
                parse_mode="HTML",
                reply_markup=get_main_menu(user.language)
            )
            await state.clear()
        else:
            await state.update_data(referral_id=referral_id)
            await bot.send_message(
                chat_id=message.chat.id,
                text=TRANSLATIONS["ru"]["welcome"].format(message.from_user.username or "User", CHANNEL_LINK),
                parse_mode="HTML",
                reply_markup=get_language_keyboard()
            )
            await state.set_state(RegisterState.language)
    except Exception as e:
        session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_start: {str(e)}", exc_info=True)
        await bot.send_message(
            chat_id=message.chat.id,
            text=TRANSLATIONS["ru"]["error"],
            parse_mode="HTML"
        )
        await state.clear()
    finally:
        session.close()
        logger.debug("Session closed")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@dp.message(RegisterState.language)
async def process_language(message: Message, state: FSMContext):
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –æ—Ç {message.from_user.id}: {message.text}")
    session = Session()
    try:
        language = "ru" if message.text == "–†—É—Å—Å–∫–∏–π üá∑üá∫" else "en" if message.text == "English üá¨üáß" else None
        if not language:
            await bot.send_message(
                chat_id=message.chat.id,
                text=TRANSLATIONS["ru"]["welcome"].format(message.from_user.username or "User", CHANNEL_LINK),
                parse_mode="HTML",
                reply_markup=get_language_keyboard()
            )
            return
        await state.update_data(language=language)
        translations = TRANSLATIONS.get(language, TRANSLATIONS["ru"])
        await bot.send_message(
            chat_id=message.chat.id,
            text=translations["language_selected"],
            parse_mode="HTML",
            reply_markup=get_phone_keyboard(language)
        )
        await state.set_state(RegisterState.phone)
    except Exception as e:
        session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_language: {str(e)}", exc_info=True)
        await bot.send_message(
            chat_id=message.chat.id,
            text=TRANSLATIONS["ru"]["error"],
            parse_mode="HTML"
        )
    finally:
        session.close()
        logger.debug("Session closed")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message(lambda message: message.contact is not None, RegisterState.phone)
async def process_phone(message: types.Message, state: FSMContext, bot: Bot):
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç {message.from_user.id}")
    session = Session()
    try:
        telegram_id = message.from_user.id
        username = message.from_user.username or "User"
        phone = message.contact.phone_number
        data = await state.get_data()
        language = data.get("language", "ru")
        referral_id = data.get("referral_id")
        translations = TRANSLATIONS.get(language, TRANSLATIONS["ru"])
        
        logger.debug(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: telegram_id={telegram_id}, username={username}, phone={phone}, language={language}, referral_id={referral_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = session.query(User).filter_by(telegram_id=telegram_id).first()
        
        if user:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ")
            user.phone = phone
            user.language = language
            user.username = username
            session.commit()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏
            await message.answer(
                translations["welcome_back"].format(username, user.balance),
                parse_mode="HTML",
                reply_markup=get_main_menu(language)
            )
        else:
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            logger.debug(f"–°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {telegram_id}")
            new_user = User(
                telegram_id=telegram_id,
                username=username,
                phone=phone,
                balance=5000.0,  # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å
                language=language,
                referral_id=referral_id,
                referral_earnings=0.0,
                total_winnings=0.0,
                game_count=0,
                is_banned=False,
                deposit_count=0,
                total_deposits=0.0,
                withdrawal_count=0,
                total_withdrawals=0.0,
                last_daily=None,
                always_win=False,
                total_bets=0.0
            )
            session.add(new_user)
            session.commit()
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
            if referral_id:
                referrer = session.query(User).filter_by(telegram_id=referral_id).first()
                if referrer:
                    bonus = 1000.0
                    referrer.balance += bonus
                    referrer.referral_earnings += bonus
                    new_user.balance += bonus
                    session.commit()
                    await bot.send_message(
                        chat_id=referrer.telegram_id,
                        text=translations["referral_bonus"].format(bonus, new_user.username),
                        parse_mode="HTML"
                    )
                    await message.answer(
                        translations["referral_bonus"].format(bonus, referrer.username),
                        parse_mode="HTML"
                    )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            bot_username = (await bot.get_me()).username
            await message.answer(
                translations["registration_success"].format(telegram_id, bot_username, telegram_id),
                parse_mode="HTML",
                reply_markup=get_main_menu(language)
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º –±–æ–Ω—É—Å–µ
            await message.answer(
                translations["welcome_bonus"].format(5000.0) + "\nüéÅ –ë–æ–Ω—É—Å 100% –Ω–∞ –ø–µ—Ä–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!",
                parse_mode="HTML"
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            try:
                await bot.send_message(
                    chat_id=ADMIN_CHAT_ID,
                    text=translations["new_user_notification"].format(
                        telegram_id,
                        new_user.id,
                        username,
                        phone,
                        language,
                        "None" if referral_id is None else referral_id
                    ),
                    parse_mode="HTML"
                )
                logger.debug(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {telegram_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
            except Exception as admin_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {str(admin_error)}")
        
        await state.clear()
    except Exception as e:
        session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_phone: {str(e)}", exc_info=True)
        await message.answer(
            TRANSLATIONS.get("error", "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."),
            parse_mode="HTML",
            reply_markup=get_main_menu(language if 'language' in locals() else "ru")
        )
        await state.clear()
    finally:
        session.close()
        logger.debug("Session closed")

# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
class AdminState(StatesGroup):
    broadcast = State()       # –î–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    deposit = State()         # –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    withdraw = State()        # –î–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤
    promocode = State()       # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    activate_promocode = State()  # –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤

@dp.message(Command("admin"))
async def cmd_admin(message: types.Message):
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /admin –æ—Ç {message.from_user.id}")
    if message.from_user.id != ADMIN_CHAT_ID:
        await message.answer(TRANSLATIONS["ru"]["not_admin"])
        return
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
        [InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data="admin_deposit")],
        [InlineKeyboardButton(text="üí∏ –°–Ω—è—Ç–∏–µ", callback_data="admin_withdraw")],
        [InlineKeyboardButton(text="üéü –ü—Ä–æ–º–æ–∫–æ–¥", callback_data="admin_promocode")]
    ])
    await message.answer(TRANSLATIONS["ru"]["admin_menu"], reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@dp.callback_query(lambda c: c.data.startswith("admin_"))
async def admin_callback(query: CallbackQuery, state: FSMContext):
    if query.from_user.id != ADMIN_CHAT_ID:
        await query.answer(TRANSLATIONS["ru"]["not_admin"], show_alert=True)
        return
    action = query.data.split("_")[1]
    translations = TRANSLATIONS["ru"]
    
    if action == "broadcast":
        await query.message.answer(translations["broadcast_prompt"], parse_mode="HTML")
        await state.set_state(AdminState.broadcast)
    elif action == "deposit":
        await query.message.answer(translations["deposit_prompt"], parse_mode="HTML")
        await state.set_state(AdminState.deposit)
    elif action == "withdraw":
        await query.message.answer(translations["withdraw_prompt"], parse_mode="HTML")
        await state.set_state(AdminState.withdraw)
    elif action == "promocode":
        await query.message.answer(translations["promocode_prompt"], parse_mode="HTML")
        await state.set_state(AdminState.promocode)
    await query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.message(AdminState.broadcast)
async def process_broadcast(message: types.Message, state: FSMContext, bot: Bot):
    if message.from_user.id != ADMIN_CHAT_ID:
        await message.answer(TRANSLATIONS["ru"]["not_admin"], parse_mode="HTML")
        return
    session = Session()
    try:
        users = session.query(User).all()
        success_count = 0
        for user in users:
            try:
                await bot.send_message(user.telegram_id, message.text, parse_mode="HTML")
                success_count += 1
                await asyncio.sleep(0.05)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ Telegram
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {str(e)}")
        await message.answer(
            TRANSLATIONS["ru"]["admin_broadcast_completed"].format(success_count, len(users) - success_count),
            parse_mode="HTML"
        )
    except Exception as e:
        session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_broadcast: {str(e)}", exc_info=True)
        await message.answer(TRANSLATIONS["ru"]["error"], parse_mode="HTML")
    finally:
        session.close()
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
@dp.message(AdminState.deposit)
async def process_deposit(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_CHAT_ID:
        await message.answer(TRANSLATIONS["ru"]["not_admin"], parse_mode="HTML")
        return
    session = Session()
    try:
        parts = message.text.split()
        if len(parts) != 2 or not parts[0].isdigit() or not parts[1].replace(".", "").isdigit():
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 123456789 1000", parse_mode="HTML")
            return
        telegram_id, amount = int(parts[0]), float(parts[1])
        user = session.query(User).filter_by(telegram_id=telegram_id).first()
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", parse_mode="HTML")
            return
        user.balance += amount
        user.deposit_count += 1
        user.total_deposits += amount
        session.commit()
        await message.answer(
            TRANSLATIONS["ru"]["admin_deposit_approve"].format(amount, user.username or "User", user.balance),
            parse_mode="HTML"
        )
        await bot.send_message(
            chat_id=user.telegram_id,
            text=TRANSLATIONS[user.language]["deposit_success"].format(amount, user.balance),
            parse_mode="HTML",
            reply_markup=get_main_menu(user.language)
        )
    except Exception as e:
        session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_deposit: {str(e)}", exc_info=True)
        await message.answer(TRANSLATIONS["ru"]["error"], parse_mode="HTML")
    finally:
        session.close()
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–Ω—è—Ç–∏—è –±–∞–ª–∞–Ω—Å–∞
@dp.message(AdminState.withdraw)
async def process_withdraw(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_CHAT_ID:
        await message.answer(TRANSLATIONS["ru"]["not_admin"], parse_mode="HTML")
        return
    session = Session()
    try:
        parts = message.text.split()
        if len(parts) != 2 or not parts[0].isdigit() or not parts[1].replace(".", "").isdigit():
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 123456789 1000", parse_mode="HTML")
            return
        telegram_id, amount = int(parts[0]), float(parts[1])
        user = session.query(User).filter_by(telegram_id=telegram_id).first()
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", parse_mode="HTML")
            return
        if user.balance < amount:
            await message.answer(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username or 'User'}!",
                parse_mode="HTML"
            )
            return
        user.balance -= amount
        user.withdrawal_count += 1
        user.total_withdrawals += amount
        session.commit()
        await message.answer(
            TRANSLATIONS["ru"]["admin_withdraw_approve"].format(amount, user.username or "User", user.balance),
            parse_mode="HTML"
        )
        await bot.send_message(
            chat_id=user.telegram_id,
            text=TRANSLATIONS[user.language]["withdraw_success"].format(amount, user.balance),
            parse_mode="HTML",
            reply_markup=get_main_menu(user.language)
        )
    except Exception as e:
        session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_withdraw: {str(e)}", exc_info=True)
        await message.answer(TRANSLATIONS["ru"]["error"], parse_mode="HTML")
    finally:
        session.close()
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
@dp.message(AdminState.promocode)
async def process_promocode(message: types.Message, state: FSMContext):
    logger.debug(f"Processing promocode input: {message.text} from user {message.from_user.id}")
    session = Session()
    try:
        if message.from_user.id != ADMIN_CHAT_ID:
            await message.answer(TRANSLATIONS["ru"]["not_admin"])
            return
        user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
        translations = TRANSLATIONS.get(user.language if user else "ru", TRANSLATIONS["ru"])
        try:
            amount, uses_remaining = map(float, message.text.split())
            if amount < 0 or uses_remaining < 0:
                logger.warning(f"Invalid input: amount={amount}, uses_remaining={uses_remaining}")
                await message.answer("‚ùå –°—É–º–º–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏!")
                return
            code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))
            promocode = PromoCode(code=code, amount=amount, uses_remaining=int(uses_remaining), created_by=message.from_user.id)
            session.add(promocode)
            session.commit()
            logger.info(f"Promo code created: code={code}, amount={amount}, uses_remaining={uses_remaining}")
            await message.answer(translations["admin_promocode_created"].format(code, amount, int(uses_remaining)))
            await state.clear()
        except ValueError:
            logger.warning(f"Invalid format for promocode input: {message.text}")
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ: <—Å—É–º–º–∞> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π>, –Ω–∞–ø—Ä–∏–º–µ—Ä, 5000 10")
    except Exception as e:
        logger.error(f"Error creating promocode: {str(e)}")
        session.rollback()
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        session.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞
@dp.message(Command(commands=["promocode"]))
async def cmd_promocode(message: types.Message, state: FSMContext):
    translations = TRANSLATIONS["ru"]
    await message.answer(translations["enter_promo"], parse_mode="HTML")
    await state.set_state(TransactionState.promo_code)

@dp.message(TransactionState.promo_code)
async def process_promo_code(message: Message, state: FSMContext):
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω –ø—Ä–æ–º–æ–∫–æ–¥ –æ—Ç {message.from_user.id}: {message.text}")
    session = Session()
    try:
        user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
        if not user or user.is_banned:
            await bot.send_message(
                chat_id=message.chat.id,
                text=TRANSLATIONS["ru"]["error"] if not user else "‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã! üö´",
                parse_mode="HTML",
                reply_markup=get_main_menu("ru")
            )
            await state.clear()
            return
        translations = TRANSLATIONS.get(user.language, TRANSLATIONS["ru"])
        promo_code = message.text.strip()
        promo = session.query(PromoCode).filter_by(code=promo_code).first()
        if not promo or promo.uses_remaining <= 0:
            await bot.send_message(
                chat_id=message.chat.id,
                text=translations["promo_invalid"],
                parse_mode="HTML",
                reply_markup=get_main_menu(user.language)
            )
            await state.clear()
            return
        user_promo = session.query(UserPromoCode).filter_by(user_id=user.id, promo_code_id=promo.id).first()
        if user_promo:
            await bot.send_message(
                chat_id=message.chat.id,
                text=translations["promo_invalid"],
                parse_mode="HTML",
                reply_markup=get_main_menu(user.language)
            )
            await state.clear()
            return
        user.balance += promo.amount
        promo.uses_remaining -= 1
        user_promo = UserPromoCode(user_id=user.id, promo_code_id=promo.id)
        session.add(user_promo)
        session.commit()
        await bot.send_message(
            chat_id=message.chat.id,
            text=translations["promo_success"].format(promo.amount, user.balance),
            parse_mode="HTML",
            reply_markup=get_main_menu(user.language)
        )
        await state.clear()
    except Exception as e:
        session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_promo_code: {str(e)}", exc_info=True)
        await bot.send_message(
            chat_id=message.chat.id,
            text=translations["error"],
            parse_mode="HTML",
            reply_markup=get_main_menu(user.language)
        )
        await state.clear()
    finally:
        session.close()
        logger.debug("Session closed")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.message(lambda message: message.text in [
    "üé∞ –°–ª–æ—Ç—ã üé∞", "üé≤ –ö–æ—Å—Ç–∏ üé≤", "üÉè –ë–ª—ç–∫–¥–∂–µ–∫ üé¥", "ü™ô –û—Ä—ë–ª –∏ –†–µ—à–∫–∞ ü™ô",
    "üí£ –ú–∏–Ω—ã üí£", "üé° –†—É–ª–µ—Ç–∫–∞ üé°", "üé≤ –ë–æ–ª—å—à–µ/–ú–µ–Ω—å—à–µ 7 üé≤", "üé® –£–≥–∞–¥–∞–π –¶–≤–µ—Ç üé®",
    "üë§ –ü—Ä–æ—Ñ–∏–ª—å üìä", "üí∞ –ë–∞–ª–∞–Ω—Å üí≥", "üí∏ –ü–æ–ø–æ–ª–Ω–∏—Ç—å üì©", "üí∏ –í—ã–≤–µ—Å—Ç–∏ üí≥",
    "üéÅ –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥", "üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å", "üìã –ó–∞–¥–∞–Ω–∏—è"
])
async def handle_menu_action(message: Message, state: FSMContext):
    message_key = f"{message.from_user.id}_{message.message_id}"
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ –º–µ–Ω—é –æ—Ç {message.from_user.id}: {message.text}")
    if message_key in processed_messages:
        logger.debug(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è –¥—É–±–ª–∏–∫–∞—Ç –¥–µ–π—Å—Ç–≤–∏—è –º–µ–Ω—é –æ—Ç {message.from_user.id}, message_id: {message.message_id}")
        return
    processed_messages.add(message_key)
    session = Session()
    try:
        user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
        if not user or user.is_banned:
            await bot.send_message(
                chat_id=message.chat.id,
                text=(TRANSLATIONS["ru"]["error"] if not user else "‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã! üö´"),
                parse_mode="HTML",
                reply_markup=get_main_menu("ru")
            )
            await state.clear()
            return
        translations = TRANSLATIONS.get(user.language, TRANSLATIONS["ru"])
        action = message.text
        if action == "üìã –ó–∞–¥–∞–Ω–∏—è":
            await bot.send_message(
                chat_id=message.chat.id,
                text=translations["tasks_menu"],
                parse_mode="HTML",
                reply_markup=get_tasks_menu(user.language)
            )
            await state.set_state(TaskState.select_task)
        elif action == "üé∞ –°–ª–æ—Ç—ã üé∞":
            await bot.send_message(chat_id=message.chat.id, text=translations["bet_prompt"], parse_mode="HTML")
            await state.set_state(GameState.bet)
            await state.update_data(game="slots")
        elif action == "üé≤ –ö–æ—Å—Ç–∏ üé≤":
            await bot.send_message(chat_id=message.chat.id, text=translations["bet_prompt"], parse_mode="HTML")
            await state.set_state(GameState.bet)
            await state.update_data(game="dice")
        elif action == "üÉè –ë–ª—ç–∫–¥–∂–µ–∫ üé¥":
            await bot.send_message(chat_id=message.chat.id, text=translations["bet_prompt"], parse_mode="HTML")
            await state.set_state(GameState.bet)
            await state.update_data(game="blackjack")
        elif action == "ü™ô –û—Ä—ë–ª –∏ –†–µ—à–∫–∞ ü™ô":
            await bot.send_message(chat_id=message.chat.id, text=translations["bet_prompt"], parse_mode="HTML")
            await state.set_state(GameState.bet)
            await state.update_data(game="coinflip")
        elif action == "üí£ –ú–∏–Ω—ã üí£":
            await bot.send_message(chat_id=message.chat.id, text=translations["bet_prompt"], parse_mode="HTML")
            await state.set_state(GameState.bet)
            await state.update_data(game="mines")
        elif action == "üé° –†—É–ª–µ—Ç–∫–∞ üé°":
            await bot.send_message(chat_id=message.chat.id, text=translations["bet_prompt"], parse_mode="HTML")
            await state.set_state(GameState.bet)
            await state.update_data(game="roulette")
        elif action == "üé≤ –ë–æ–ª—å—à–µ/–ú–µ–Ω—å—à–µ 7 üé≤":
            await bot.send_message(chat_id=message.chat.id, text=translations["bet_prompt"], parse_mode="HTML")
            await state.set_state(GameState.bet)
            await state.update_data(game="overunder")
        elif action == "üé® –£–≥–∞–¥–∞–π –¶–≤–µ—Ç üé®":
            await bot.send_message(chat_id=message.chat.id, text=translations["bet_prompt"], parse_mode="HTML")
            await state.set_state(GameState.bet)
            await state.update_data(game="guesscolor")
        elif action == "üë§ –ü—Ä–æ—Ñ–∏–ª—å üìä":
            await bot.send_message(chat_id=message.chat.id, text=translations["profile"].format(
                user.telegram_id,
                user.deposit_count,
                user.total_deposits,
                user.withdrawal_count,
                user.total_withdrawals,
                user.total_winnings,
                user.balance
            ), parse_mode="HTML")
        elif action == "üí∞ –ë–∞–ª–∞–Ω—Å üí≥":
            await bot.send_message(
                chat_id=message.chat.id,
                text=translations["balance"].format(user.balance),
                parse_mode="HTML",
                reply_markup=get_balance_menu(user.language)
            )
        elif action == "üí∏ –ü–æ–ø–æ–ª–Ω–∏—Ç—å üì©":
            await bot.send_message(
                chat_id=message.chat.id,
                text="–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω—É @win_betuz",
                parse_mode="HTML",
                reply_markup=get_main_menu(user.language)
            )
            await state.clear()
        elif action == "üí∏ –í—ã–≤–µ—Å—Ç–∏ üí≥":
            if user.deposit_count == 0:
                await bot.send_message(
                    chat_id=message.chat.id,
                    text=translations["withdraw_bonus_restriction"],
                    parse_mode="HTML",
                    reply_markup=get_main_menu(user.language)
                )
                await state.clear()
                return
            if user.deposit_count > 0 and user.total_bets < user.total_deposits * 1.1:
                await bot.send_message(
                    chat_id=message.chat.id,
                    text=translations["withdraw_no_bets"],
                    parse_mode="HTML",
                    reply_markup=get_main_menu(user.language)
                )
                await state.clear()
                return
            await bot.send_message(
                chat_id=message.chat.id,
                text=translations["withdraw_method"],
                parse_mode="HTML",
                reply_markup=get_withdraw_method_keyboard(user.language)
            )
            await state.set_state(TransactionState.withdraw_method)
        elif action == "üéÅ –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥":
            await bot.send_message(
                chat_id=message.chat.id,
                text=translations["enter_promo"],
                parse_mode="HTML"
            )
            await state.set_state(TransactionState.promo_code)
        elif action == "üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å":
            now = datetime.utcnow()
            if user.last_daily and (now - user.last_daily).days < 1:
                await bot.send_message(
                    chat_id=message.chat.id,
                    text=translations["daily_already_claimed"],
                    parse_mode="HTML",
                    reply_markup=get_main_menu(user.language)
                )
            else:
                bonus = 1000.0
                user.balance += bonus
                user.last_daily = now
                session.commit()
                await bot.send_message(
                    chat_id=message.chat.id,
                    text=translations["daily_bonus"].format(bonus, user.balance),
                    parse_mode="HTML",
                    reply_markup=get_main_menu(user.language)
                )
            await state.clear()
    except Exception as e:
        session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_menu_action: {str(e)}", exc_info=True)
        await bot.send_message(
            chat_id=message.chat.id,
            text=translations["error"],
            parse_mode="HTML",
            reply_markup=get_main_menu(user.language)
        )
        await state.clear()
    finally:
        session.close()
        logger.debug("Session closed")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /setwin
@dp.message(RegexpCommandsFilter(regexp_commands=[r"/setwin_(\d+)"]))
async def set_win(message: Message, regexp_command: re.Match):
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /setwin –æ—Ç {message.from_user.id}: {message.text}")
    if message.from_user.id != ADMIN_CHAT_ID:
        await bot.send_message(
            chat_id=message.chat.id,
            text=TRANSLATIONS["ru"]["not_admin"],
            parse_mode="HTML"
        )
        return
    session = Session()
    try:
        user_id = int(regexp_command.group(1))
        user = session.query(User).filter_by(telegram_id=user_id).first()
        if not user:
            await bot.send_message(
                chat_id=message.chat.id,
                text=TRANSLATIONS["ru"]["admin_user_not_found"],
                parse_mode="HTML"
            )
            return
        user.always_win = True
        session.commit()
        await bot.send_message(
            chat_id=message.chat.id,
            text=f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username or 'User'} ({user.telegram_id}) —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç!",
            parse_mode="HTML"
        )
    except Exception as e:
        session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –≤ set_win: {str(e)}", exc_info=True)
        await bot.send_message(
            chat_id=message.chat.id,
            text=TRANSLATIONS["ru"]["error"],
            parse_mode="HTML"
        )
    finally:
        session.close()
        logger.debug("Session closed")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /setlose
@dp.message(RegexpCommandsFilter(regexp_commands=[r"/setlose_(\d+)"]))
async def set_lose(message: Message, regexp_command: re.Match):
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /setlose –æ—Ç {message.from_user.id}: {message.text}")
    if message.from_user.id != ADMIN_CHAT_ID:
        await bot.send_message(
            chat_id=message.chat.id,
            text=TRANSLATIONS["ru"]["not_admin"],
            parse_mode="HTML"
        )
        return
    session = Session()
    try:
        user_id = int(regexp_command.group(1))
        user = session.query(User).filter_by(telegram_id=user_id).first()
        if not user:
            await bot.send_message(
                chat_id=message.chat.id,
                text=TRANSLATIONS["ru"]["admin_user_not_found"],
                parse_mode="HTML"
            )
            return
        user.always_win = False
        session.commit()
        await bot.send_message(
            chat_id=message.chat.id,
            text=f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username or 'User'} ({user.telegram_id}) —Ç–µ–ø–µ—Ä—å –Ω–µ –≤—Å–µ–≥–¥–∞ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç!",
            parse_mode="HTML"
        )
    except Exception as e:
        session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –≤ set_lose: {str(e)}", exc_info=True)
        await bot.send_message(
            chat_id=message.chat.id,
            text=TRANSLATIONS["ru"]["error"],
            parse_mode="HTML"
        )
    finally:
        session.close()
        logger.debug("Session closed")
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—Ç–∞–≤–∫–∏
@dp.message(GameState.bet)
async def process_bet(message: Message, state: FSMContext):
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞–≤–∫–∞ –æ—Ç {message.from_user.id}: {message.text}")
    session = Session()
    try:
        user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
        if not user or user.is_banned:
            await bot.send_message(
                chat_id=message.chat.id,
                text=TRANSLATIONS["ru"]["error"] if not user else "‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã! üö´",
                parse_mode="HTML",
                reply_markup=get_main_menu("ru")
            )
            await state.clear()
            return
        translations = TRANSLATIONS.get(user.language, TRANSLATIONS["ru"])
        try:
            bet = float(message.text.strip())
            if bet < 1000:
                await bot.send_message(
                    chat_id=message.chat.id,
                    text=translations["invalid_bet"].format(user.balance),
                    parse_mode="HTML"
                )
                return
            if bet > user.balance:
                await bot.send_message(
                    chat_id=message.chat.id,
                    text=translations["insufficient_balance"].format(user.balance),
                    parse_mode="HTML"
                )
                return
            user.balance -= bet
            user.total_bets += bet
            user.game_count += 1
            session.commit()
            await state.update_data(bet=bet)
            data = await state.get_data()
            game = data.get("game")
            if game == "dice":
                await bot.send_message(
                    chat_id=message.chat.id,
                    text=translations["dice_start"],
                    parse_mode="HTML",
                    reply_markup=get_dice_keyboard(user.language)
                )
                await state.set_state(GameState.dice_choice)
            elif game == "slots":
                await bot.send_message(
                    chat_id=message.chat.id,
                    text=translations["slots_start"],
                    parse_mode="HTML",
                    reply_markup=get_slots_keyboard(user.language)
                )
                await state.set_state(GameState.slots_spin)
            elif game == "blackjack":
                cards = [random.randint(1, 11), random.randint(1, 11)]
                total = sum(cards)
                await state.update_data(cards=cards, total=total)
                await bot.send_message(
                    chat_id=message.chat.id,
                    text=translations["blackjack_start"].format(", ".join(map(str, cards)), total),
                    parse_mode="HTML",
                    reply_markup=get_blackjack_hit_keyboard(user.language)
                )
                await state.set_state(GameState.blackjack_hit)
            elif game == "coinflip":
                await bot.send_message(
                    chat_id=message.chat.id,
                    text=translations["coinflip_start"],
                    parse_mode="HTML",
                    reply_markup=get_coinflip_keyboard(user.language)
                )
                await state.set_state(GameState.coinflip_choice)
            elif game == "mines":
                grid = [0] * 9
                mines = random.sample(range(9), 3)
                await state.update_data(grid=grid, mines=mines, multiplier=1.0, opened_cells=0)
                await bot.send_message(
                    chat_id=message.chat.id,
                    text=translations["mines_start"],
                    parse_mode="HTML",
                    reply_markup=get_mines_keyboard(grid, 1.0, False, user.language)
                )
                await state.set_state(GameState.mines_cell)
            elif game == "roulette":
                await bot.send_message(
                    chat_id=message.chat.id,
                    text=translations["roulette_start"],
                    parse_mode="HTML",
                    reply_markup=get_roulette_keyboard(user.language)
                )
                await state.set_state(GameState.roulette_choice)
            elif game == "overunder":
                await bot.send_message(
                    chat_id=message.chat.id,
                    text=translations["overunder_start"],
                    parse_mode="HTML",
                    reply_markup=get_overunder_keyboard(user.language)
                )
                await state.set_state(GameState.overunder_choice)
            elif game == "guesscolor":
                await bot.send_message(
                    chat_id=message.chat.id,
                    text=translations["guesscolor_start"],
                    parse_mode="HTML",
                    reply_markup=get_guesscolor_keyboard(user.language)
                )
                await state.set_state(GameState.guesscolor_choice)
        except ValueError:
            await bot.send_message(
                chat_id=message.chat.id,
                text=translations["bet_prompt"],
                parse_mode="HTML"
            )
    except Exception as e:
        session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_bet: {str(e)}", exc_info=True)
        await bot.send_message(
            chat_id=message.chat.id,
            text=translations["error"],
            parse_mode="HTML",
            reply_markup=get_main_menu(user.language)
        )
        await state.clear()
    finally:
        session.close()
        logger.debug("Session closed")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è
@dp.callback_query(lambda callback: callback.data.startswith("task_") or callback.data.startswith("check_task_") or callback.data.startswith("submit_task_"))
async def process_task_selection(callback: CallbackQuery, state: FSMContext):
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω –≤—ã–±–æ—Ä –∑–∞–¥–∞–Ω–∏—è –æ—Ç {callback.from_user.id}: {callback.data}")
    session = Session()
    try:
        user = session.query(User).filter_by(telegram_id=callback.from_user.id).first()
        if not user or user.is_banned:
            await callback.message.edit_text(
                text=TRANSLATIONS["ru"]["error"] if not user else "‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã! üö´",
                parse_mode="HTML",
                reply_markup=None
            )
            await bot.send_message(
                chat_id=callback.message.chat.id,
                text=TRANSLATIONS["ru"]["welcome_back"].format(user.username or "Player", user.balance),
                parse_mode="HTML",
                reply_markup=get_main_menu("ru")
            )
            await state.clear()
            await callback.answer()
            return
        translations = TRANSLATIONS.get(user.language, TRANSLATIONS["ru"])
        if callback.data.startswith("task_"):
            task_type = callback.data.split("_")[1]
            if task_type == "telegram_sub":
                task = session.query(Task).filter_by(task_type="telegram_sub", active=True).first()
                if not task:
                    task = Task(task_type="telegram_sub", reward=700.0, link="@SomeTelegramChannel", min_followers=0, active=True)
                    session.add(task)
                    session.commit()
                if session.query(UserTask).filter_by(user_id=user.id, task_id=task.id).first():
                    await callback.message.edit_text(
                        text=translations["task_already_completed"],
                        parse_mode="HTML",
                        reply_markup=None
                    )
                    await bot.send_message(
                        chat_id=callback.message.chat.id,
                        text=translations["welcome_back"].format(user.username or "Player", user.balance),
                        parse_mode="HTML",
                        reply_markup=get_main_menu(user.language)
                    )
                    await state.clear()
                    await callback.answer()
                    return
                await state.update_data(task_id=task.id, task_type="telegram_sub")
                await callback.message.edit_text(
                    text=translations["task_telegram_sub"].format(task.link),
                    parse_mode="HTML",
                    reply_markup=get_task_check_keyboard(task.id, user.language)
                )
            elif task_type == "instagram_sub":
                task = session.query(Task).filter_by(task_type="instagram_sub", active=True).first()
                if not task:
                    task = Task(task_type="instagram_sub", reward=1000.0, link="@SomeInstagramAccount", min_followers=20, active=True)
                    session.add(task)
                    session.commit()
                if session.query(UserTask).filter_by(user_id=user.id, task_id=task.id).first():
                    await callback.message.edit_text(
                        text=translations["task_already_completed"],
                        parse_mode="HTML",
                        reply_markup=None
                    )
                    await bot.send_message(
                        chat_id=callback.message.chat.id,
                        text=translations["welcome_back"].format(user.username or "Player", user.balance),
                        parse_mode="HTML",
                        reply_markup=get_main_menu(user.language)
                    )
                    await state.clear()
                    await callback.answer()
                    return
                await state.update_data(task_id=task.id, task_type="instagram_sub")
                await callback.message.edit_text(
                    text=translations["task_instagram_sub"].format(task.link),
                    parse_mode="HTML",
                    reply_markup=get_task_submit_keyboard(task.id, user.language, "nickname")
                )
            elif task_type == "repost":
                task = session.query(Task).filter_by(task_type="repost", active=True).first()
                if not task:
                    task = Task(task_type="repost", reward=3000.0, link="https://t.me/SomePostLink", min_followers=0, active=True)
                    session.add(task)
                    session.commit()
                if session.query(UserTask).filter_by(user_id=user.id, task_id=task.id).first():
                    await callback.message.edit_text(
                        text=translations["task_already_completed"],
                        parse_mode="HTML",
                        reply_markup=None
                    )
                    await bot.send_message(
                        chat_id=callback.message.chat.id,
                        text=translations["welcome_back"].format(user.username or "Player", user.balance),
                        parse_mode="HTML",
                        reply_markup=get_main_menu(user.language)
                    )
                    await state.clear()
                    await callback.answer()
                    return
                await state.update_data(task_id=task.id, task_type="repost")
                await callback.message.edit_text(
                                   text=translations["task_repost"].format(task.link),
                parse_mode="HTML",
                reply_markup=get_task_submit_keyboard(task.id, user.language, "repost")
            )
            elif task_type == "winbetpromo_sub":
                task = session.query(Task).filter_by(task_type="winbetpromo_sub", active=True).first()
                if not task:
                    task = Task(task_type="winbetpromo_sub", reward=500.0, link=CHANNEL_LINK, min_followers=0, active=True)
                    session.add(task)
                    session.commit()
                if session.query(UserTask).filter_by(user_id=user.id, task_id=task.id).first():
                    await callback.message.edit_text(
                        text=translations["task_already_completed"],
                        parse_mode="HTML",
                        reply_markup=None
                    )
                    await bot.send_message(
                        chat_id=callback.message.chat.id,
                        text=translations["welcome_back"].format(user.username or "Player", user.balance),
                        parse_mode="HTML",
                        reply_markup=get_main_menu(user.language)
                    )
                    await state.clear()
                    await callback.answer()
                    return
                await state.update_data(task_id=task.id, task_type="winbetpromo_sub")
                await callback.message.edit_text(
                    text=translations["task_telegram_sub"].format(task.link),
                    parse_mode="HTML",
                    reply_markup=get_task_check_keyboard(task.id, user.language)
                )
        elif callback.data.startswith("check_task_"):
            task_id = int(callback.data.split("_")[2])
            task = session.query(Task).filter_by(id=task_id).first()
            if not task:
                await callback.message.edit_text(
                    text=translations["error"],
                    parse_mode="HTML",
                    reply_markup=None
                )
                await bot.send_message(
                    chat_id=callback.message.chat.id,
                    text=translations["welcome_back"].format(user.username or "Player", user.balance),
                    parse_mode="HTML",
                    reply_markup=get_main_menu(user.language)
                )
                await state.clear()
                await callback.answer()
                return
            is_subscribed = await check_channel_subscription(callback.from_user.id, task.link)
            if not is_subscribed:
                await callback.message.edit_text(
                    text=translations["task_not_subscribed"],
                    parse_mode="HTML",
                    reply_markup=get_task_check_keyboard(task.id, user.language)
                )
                await callback.answer()
                return
            user_task = UserTask(user_id=user.id, task_id=task.id, status="pending")
            session.add(user_task)
            session.commit()
            await callback.message.edit_text(
                text=translations["task_success"].format(task.reward, user.balance + task.reward),
                parse_mode="HTML",
                reply_markup=None
            )
            user.balance += task.reward
            session.commit()
            await bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=translations["admin_task_request"].format(
                    user.telegram_id, user.username or "User", task.task_type, "Subscribed", task.reward, task.id, user.id
                ),
                parse_mode="HTML"
            )
            await bot.send_message(
                chat_id=callback.message.chat.id,
                text=translations["welcome_back"].format(user.username or "Player", user.balance),
                parse_mode="HTML",
                reply_markup=get_main_menu(user.language)
            )
            await state.clear()
        elif callback.data.startswith("submit_task_"):
            task_id = int(callback.data.split("_")[2])
            task = session.query(Task).filter_by(id=task_id).first()
            if not task:
                await callback.message.edit_text(
                    text=translations["error"],
                    parse_mode="HTML",
                    reply_markup=None
                )
                await bot.send_message(
                    chat_id=callback.message.chat.id,
                    text=translations["welcome_back"].format(user.username or "Player", user.balance),
                    parse_mode="HTML",
                    reply_markup=get_main_menu(user.language)
                )
                await state.clear()
                await callback.answer()
                return
            await state.update_data(task_id=task.id, task_type=task.task_type)
            await callback.message.edit_text(
                text=translations["task_submit"],
                parse_mode="HTML",
                reply_markup=None
            )
            await state.set_state(TaskState.submit_task)
        await callback.answer()
    except Exception as e:
        session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_task_selection: {str(e)}", exc_info=True)
        await callback.message.edit_text(
            text=translations["error"],
            parse_mode="HTML",
            reply_markup=None
        )
        await bot.send_message(
            chat_id=callback.message.chat.id,
            text=translations["welcome_back"].format(user.username or "Player", user.balance),
            parse_mode="HTML",
            reply_markup=get_main_menu(user.language)
        )
        await state.clear()
        await callback.answer()
    finally:
        session.close()
        logger.debug("Session closed")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–¥–∞–Ω–∏—è
@dp.message(TaskState.submit_task)
async def process_task_submission(message: Message, state: FSMContext):
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç {message.from_user.id}: {message.text}")
    session = Session()
    try:
        user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
        if not user or user.is_banned:
            await bot.send_message(
                chat_id=message.chat.id,
                text=TRANSLATIONS["ru"]["error"] if not user else "‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã! üö´",
                parse_mode="HTML",
                reply_markup=get_main_menu("ru")
            )
            await state.clear()
            return
        translations = TRANSLATIONS.get(user.language, TRANSLATIONS["ru"])
        data = await state.get_data()
        task_id = data.get("task_id")
        task_type = data.get("task_type")
        task = session.query(Task).filter_by(id=task_id).first()
        if not task:
            await bot.send_message(
                chat_id=message.chat.id,
                text=translations["error"],
                parse_mode="HTML",
                reply_markup=get_main_menu(user.language)
            )
            await state.clear()
            return
        if session.query(UserTask).filter_by(user_id=user.id, task_id=task.id).first():
            await bot.send_message(
                chat_id=message.chat.id,
                text=translations["task_already_completed"],
                parse_mode="HTML",
                reply_markup=get_main_menu(user.language)
            )
            await state.clear()
            return
        submission = message.text.strip()
        if task_type == "instagram_sub" and task.min_followers > 0:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞, —Ç–∞–∫ –∫–∞–∫ API Instagram —Å–ª–æ–∂–µ–Ω)
            if len(submission) < 3:
                await bot.send_message(
                    chat_id=message.chat.id,
                    text=translations["task_invalid_submission"],
                    parse_mode="HTML",
                    reply_markup=get_task_submit_keyboard(task.id, user.language, "nickname")
                )
                return
        elif task_type == "repost":
            if not submission.startswith("https://"):
                await bot.send_message(
                    chat_id=message.chat.id,
                    text=translations["task_invalid_submission"],
                    parse_mode="HTML",
                    reply_markup=get_task_submit_keyboard(task.id, user.language, "repost")
                )
                return
        user_task = UserTask(user_id=user.id, task_id=task.id, status="pending", submission=submission)
        session.add(user_task)
        session.commit()
        await bot.send_message(
            chat_id=message.chat.id,
            text=translations["task_success"].format(task.reward, user.balance + task.reward),
            parse_mode="HTML",
            reply_markup=get_main_menu(user.language)
        )
        user.balance += task.reward
        session.commit()
        await bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=translations["admin_task_request"].format(
                user.telegram_id, user.username or "User", task.task_type, submission, task.reward, task.id, user.id
            ),
            parse_mode="HTML"
        )
        await state.clear()
    except Exception as e:
        session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_task_submission: {str(e)}", exc_info=True)
        await bot.send_message(
            chat_id=message.chat.id,
            text=translations["error"],
            parse_mode="HTML",
            reply_markup=get_main_menu(user.language)
        )
        await state.clear()
    finally:
        session.close()
        logger.debug("Session closed")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —á–∏—Å–ª–∞ –¥–ª—è –∏–≥—Ä—ã –≤ –∫–æ—Å—Ç–∏
@dp.message(GameState.dice_choice)
async def process_dice_choice(message: Message, state: FSMContext):
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω –≤—ã–±–æ—Ä —á–∏—Å–ª–∞ –¥–ª—è –∫–æ—Å—Ç–µ–π –æ—Ç {message.from_user.id}: {message.text}")
    session = Session()
    try:
        user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
        if not user or user.is_banned:
            await bot.send_message(
                chat_id=message.chat.id,
                text=TRANSLATIONS["ru"]["error"] if not user else "‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã! üö´",
                parse_mode="HTML",
                reply_markup=get_main_menu("ru")
            )
            await state.clear()
            return
        translations = TRANSLATIONS.get(user.language, TRANSLATIONS["ru"])
        try:
            choice = int(message.text)
            if choice < 1 or choice > 6:
                await bot.send_message(
                    chat_id=message.chat.id,
                    text=translations["dice_start"],
                    parse_mode="HTML",
                    reply_markup=get_dice_keyboard(user.language)
                )
                return
        except ValueError:
            await bot.send_message(
                chat_id=message.chat.id,
                text=translations["dice_start"],
                parse_mode="HTML",
                reply_markup=get_dice_keyboard(user.language)
            )
            return
        data = await state.get_data()
        bet = data.get("bet", 0.0)
        roll = random.randint(1, 6)
        win_chance = get_win_chance(user, ADMIN_CHAT_ID)
        if random.random() < win_chance:
            roll = choice
        if roll == choice:
            winnings = bet * 5.0
            user.balance += winnings
            user.total_winnings += winnings
            session.commit()
            await bot.send_message(
                chat_id=message.chat.id,
                text=translations["dice_win"].format(roll, winnings, user.balance),
                parse_mode="HTML",
                reply_markup=get_main_menu(user.language)
            )
        else:
            await bot.send_message(
                chat_id=message.chat.id,
                text=translations["dice_lose"].format(roll, user.balance),
                parse_mode="HTML",
                reply_markup=get_main_menu(user.language)
            )
        await state.clear()
    except Exception as e:
        session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_dice_choice: {str(e)}", exc_info=True)
        await bot.send_message(
            chat_id=message.chat.id,
            text=translations["error"],
            parse_mode="HTML",
            reply_markup=get_main_menu(user.language)
        )
        await state.clear()
    finally:
        session.close()
        logger.debug("Session closed")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏–Ω–∞ —Å–ª–æ—Ç–æ–≤
@dp.callback_query(lambda c: c.data == "spin", GameState.slots_spin)
async def process_slots_spin(callback: CallbackQuery, state: FSMContext):
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω —Å–ø–∏–Ω —Å–ª–æ—Ç–æ–≤ –æ—Ç {callback.from_user.id}")
    session = Session()
    try:
        user = session.query(User).filter_by(telegram_id=callback.from_user.id).first()
        if not user or user.is_banned:
            await callback.message.edit_text(
                text=TRANSLATIONS["ru"]["error"] if not user else "‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã! üö´",
                parse_mode="HTML",
                reply_markup=None
            )
            await bot.send_message(
                chat_id=callback.message.chat.id,
                text=TRANSLATIONS["ru"]["welcome_back"].format(user.username or "Player", user.balance),
                parse_mode="HTML",
                reply_markup=get_main_menu("ru")
            )
            await state.clear()
            await callback.answer()
            return
        translations = TRANSLATIONS.get(user.language, TRANSLATIONS["ru"])
        data = await state.get_data()
        bet = data.get("bet", 0.0)
        symbols = ["üçé", "üçê", "üçí", "üçã", "üçä"]
        result = [random.choice(symbols) for _ in range(3)]
        win_chance = get_win_chance(user, ADMIN_CHAT_ID)
        if random.random() < win_chance:
            result = [symbols[0], symbols[0], symbols[0]]
        if result[0] == result[1] == result[2]:
            winnings = bet * 10.0
            user.balance += winnings
            user.total_winnings += winnings
            session.commit()
            await callback.message.edit_text(
                text=translations["slots_result"].format(" | ".join(result), f"üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: {winnings:.2f} —Å—É–º!\n", user.balance),
                parse_mode="HTML",
                reply_markup=None
            )
        else:
            await callback.message.edit_text(
                text=translations["slots_result"].format(" | ".join(result), "üòî –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!\n", user.balance),
                parse_mode="HTML",
                reply_markup=None
            )
        await bot.send_message(
            chat_id=callback.message.chat.id,
            text=translations["welcome_back"].format(user.username or "Player", user.balance),
            parse_mode="HTML",
            reply_markup=get_main_menu(user.language)
        )
        await state.clear()
        await callback.answer()
    except Exception as e:
        session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_slots_spin: {str(e)}", exc_info=True)
        await callback.message.edit_text(
            text=translations["error"],
            parse_mode="HTML",
            reply_markup=None
        )
        await bot.send_message(
            chat_id=callback.message.chat.id,
            text=translations["welcome_back"].format(user.username or "Player", user.balance),
            parse_mode="HTML",
            reply_markup=get_main_menu(user.language)
        )
        await state.clear()
        await callback.answer()
    finally:
        session.close()
        logger.debug("Session closed")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–ª—ç–∫–¥–∂–µ–∫–∞
@dp.message(GameState.blackjack_hit)
async def process_blackjack_hit(message: Message, state: FSMContext):
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω –≤—ã–±–æ—Ä –±–ª—ç–∫–¥–∂–µ–∫–∞ –æ—Ç {message.from_user.id}: {message.text}")
    session = Session()
    try:
        user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
        if not user or user.is_banned:
            await bot.send_message(
                chat_id=message.chat.id,
                text=TRANSLATIONS["ru"]["error"] if not user else "‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã! üö´",
                parse_mode="HTML",
                reply_markup=get_main_menu("ru")
            )
            await state.clear()
            return
        translations = TRANSLATIONS.get(user.language, TRANSLATIONS["ru"])
        data = await state.get_data()
        bet = data.get("bet", 0.0)
        cards = data.get("cards", [])
        total = data.get("total", 0)
        if message.text in ["–î–∞", "Yes"]:
            new_card = random.randint(1, 11)
            cards.append(new_card)
            total += new_card
            if total > 21:
                session.commit()
                await bot.send_message(
                    chat_id=message.chat.id,
                    text=translations["blackjack_bust"].format(total, user.balance),
                    parse_mode="HTML",
                    reply_markup=get_main_menu(user.language)
                )
                await state.clear()
                return
            await state.update_data(cards=cards, total=total)
            await bot.send_message(
                chat_id=message.chat.id,
                text=translations["blackjack_start"].format(", ".join(map(str, cards)), total),
                parse_mode="HTML",
                reply_markup=get_blackjack_hit_keyboard(user.language)
            )
        elif message.text in ["–ù–µ—Ç", "No"]:
            dealer_total = random.randint(17, 22)
            win_chance = get_win_chance(user, ADMIN_CHAT_ID)
            if random.random() < win_chance:
                dealer_total = min(dealer_total, 16)
            if total > dealer_total or dealer_total > 21:
                winnings = bet * 2.0
                user.balance += winnings
                user.total_winnings += winnings
                session.commit()
                await bot.send_message(
                    chat_id=message.chat.id,
                    text=translations["blackjack_win"].format(winnings, user.balance),
                    parse_mode="HTML",
                    reply_markup=get_main_menu(user.language)
                )
            else:
                await bot.send_message(
                    chat_id=message.chat.id,
                    text=translations["blackjack_lose"].format(dealer_total, user.balance),
                    parse_mode="HTML",
                    reply_markup=get_main_menu(user.language)
                )
            await state.clear()
        else:
            await bot.send_message(
                chat_id=message.chat.id,
                text=translations["blackjack_start"].format(", ".join(map(str, cards)), total),
                parse_mode="HTML",
                reply_markup=get_blackjack_hit_keyboard(user.language)
            )
    except Exception as e:
        session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_blackjack_hit: {str(e)}", exc_info=True)
        await bot.send_message(
            chat_id=message.chat.id,
            text=translations["error"],
            parse_mode="HTML",
            reply_markup=get_main_menu(user.language)
        )
        await state.clear()
    finally:
        session.close()
        logger.debug("Session closed")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥—Ä—ã –û—Ä—ë–ª –∏ –†–µ—à–∫–∞
@dp.message(GameState.coinflip_choice)
async def process_coinflip_choice(message: Message, state: FSMContext):
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω –≤—ã–±–æ—Ä –¥–ª—è –û—Ä—ë–ª –∏ –†–µ—à–∫–∞ –æ—Ç {message.from_user.id}: {message.text}")
    session = Session()
    try:
        user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
        if not user or user.is_banned:
            await bot.send_message(
                chat_id=message.chat.id,
                text=TRANSLATIONS["ru"]["error"] if not user else "‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã! üö´",
                parse_mode="HTML",
                reply_markup=get_main_menu("ru")
            )
            await state.clear()
            return
        translations = TRANSLATIONS.get(user.language, TRANSLATIONS["ru"])
        choice = message.text
        if choice not in ["–û—Ä—ë–ª", "–†–µ—à–∫–∞", "Heads", "Tails"]:
            await bot.send_message(
                chat_id=message.chat.id,
                text=translations["coinflip_start"],
                parse_mode="HTML",
                reply_markup=get_coinflip_keyboard(user.language)
            )
            return
        data = await state.get_data()
        bet = data.get("bet", 0.0)
        result = random.choice(["–û—Ä—ë–ª", "–†–µ—à–∫–∞"] if user.language == "ru" else ["Heads", "Tails"])
        win_chance = get_win_chance(user, ADMIN_CHAT_ID)
        if random.random() < win_chance:
            result = choice
        if result == choice:
            winnings = bet * 2.0
            user.balance += winnings
            user.total_winnings += winnings
            session.commit()
            await bot.send_message(
                chat_id=message.chat.id,
                text=translations["coinflip_win"].format(result, winnings, user.balance),
                parse_mode="HTML",
                reply_markup=get_main_menu(user.language)
            )
        else:
            await bot.send_message(
                chat_id=message.chat.id,
                text=translations["coinflip_lose"].format(result, user.balance),
                parse_mode="HTML",
                reply_markup=get_main_menu(user.language)
            )
        await state.clear()
    except Exception as e:
        session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_coinflip_choice: {str(e)}", exc_info=True)
        await bot.send_message(
            chat_id=message.chat.id,
            text=translations["error"],
            parse_mode="HTML",
            reply_markup=get_main_menu(user.language)
        )
        await state.clear()
    finally:
        session.close()
        logger.debug("Session closed")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥—Ä—ã –ú–∏–Ω—ã
@dp.callback_query(lambda c: c.data.startswith("mines_") or c.data == "mines_cashout", GameState.mines_cell)
async def process_mines_choice(callback: CallbackQuery, state: FSMContext):
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω –≤—ã–±–æ—Ä –¥–ª—è –ú–∏–Ω—ã –æ—Ç {callback.from_user.id}: {callback.data}")
    session = Session()
    try:
        user = session.query(User).filter_by(telegram_id=callback.from_user.id).first()
        if not user or user.is_banned:
            await callback.message.edit_text(
                text=TRANSLATIONS["ru"]["error"] if not user else "‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã! üö´",
                parse_mode="HTML",
                reply_markup=None
            )
            await bot.send_message(
                chat_id=callback.message.chat.id,
                text=TRANSLATIONS["ru"]["welcome_back"].format(user.username or "Player", user.balance),
                parse_mode="HTML",
                reply_markup=get_main_menu("ru")
            )
            await state.clear()
            await callback.answer()
            return
        translations = TRANSLATIONS.get(user.language, TRANSLATIONS["ru"])
        data = await state.get_data()
        bet = data.get("bet", 0.0)
        grid = data.get("grid", [0] * 9)
        mines = data.get("mines", [])
        multiplier = data.get("multiplier", 1.0)
        opened_cells = data.get("opened_cells", 0)
        if callback.data == "mines_cashout":
            winnings = bet * multiplier
            user.balance += winnings
            user.total_winnings += winnings
            session.commit()
            await callback.message.edit_text(
                text=translations["mines_cashout"].format(multiplier, winnings, user.balance),
                parse_mode="HTML",
                reply_markup=None
            )
            await bot.send_message(
                chat_id=callback.message.chat.id,
                text=translations["welcome_back"].format(user.username or "Player", user.balance),
                parse_mode="HTML",
                reply_markup=get_main_menu(user.language)
            )
            await state.clear()
            await callback.answer()
            return
        cell = int(callback.data.split("_")[1])
        if cell in mines:
            grid[cell] = 1
            await callback.message.edit_text(
                text=translations["mines_lose"].format(user.balance),
                parse_mode="HTML",
                reply_markup=get_mines_keyboard(grid, multiplier, True, user.language)
            )
            await bot.send_message(
                chat_id=callback.message.chat.id,
                text=translations["welcome_back"].format(user.username or "Player", user.balance),
                parse_mode="HTML",
                reply_markup=get_main_menu(user.language)
            )
            await state.clear()
            await callback.answer()
            return
        grid[cell] = 2
        opened_cells += 1
        multiplier *= 1.5
        await state.update_data(grid=grid, multiplier=multiplier, opened_cells=opened_cells)
        await callback.message.edit_text(
            text=translations["mines_win"].format(multiplier, user.balance),
            parse_mode="HTML",
            reply_markup=get_mines_keyboard(grid, multiplier, False, user.language)
        )
        await callback.answer()
    except Exception as e:
        session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_mines_choice: {str(e)}", exc_info=True)
        await callback.message.edit_text(
            text=translations["error"],
            parse_mode="HTML",
            reply_markup=None
        )
        await bot.send_message(
            chat_id=callback.message.chat.id,
            text=translations["welcome_back"].format(user.username or "Player", user.balance),
            parse_mode="HTML",
            reply_markup=get_main_menu(user.language)
        )
        await state.clear()
        await callback.answer()
    finally:
        session.close()
        logger.debug("Session closed")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥—Ä—ã –†—É–ª–µ—Ç–∫–∞
@dp.message(GameState.roulette_choice)
async def process_roulette_choice(message: Message, state: FSMContext):
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω –≤—ã–±–æ—Ä –¥–ª—è –†—É–ª–µ—Ç–∫–∏ –æ—Ç {message.from_user.id}: {message.text}")
    session = Session()
    try:
        user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
        if not user or user.is_banned:
            await bot.send_message(
                chat_id=message.chat.id,
                text=TRANSLATIONS["ru"]["error"] if not user else "‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã! üö´",
                parse_mode="HTML",
                reply_markup=get_main_menu("ru")
            )
            await state.clear()
            return
        translations = TRANSLATIONS.get(user.language, TRANSLATIONS["ru"])
        choice = message.text
        if choice not in ["–ö—Ä–∞—Å–Ω–æ–µ", "–ß—ë—Ä–Ω–æ–µ", "–ó–µ–ª—ë–Ω–æ–µ", "Red", "Black", "Green"]:
            await bot.send_message(
                chat_id=message.chat.id,
                text=translations["roulette_start"],
                parse_mode="HTML",
                reply_markup=get_roulette_keyboard(user.language)
            )
            return
        data = await state.get_data()
        bet = data.get("bet", 0.0)
        result = random.choices(
            ["–ö—Ä–∞—Å–Ω–æ–µ", "–ß—ë—Ä–Ω–æ–µ", "–ó–µ–ª—ë–Ω–æ–µ"] if user.language == "ru" else ["Red", "Black", "Green"],
            weights=[48, 48, 4]
        )[0]
        win_chance = get_win_chance(user, ADMIN_CHAT_ID)
        if random.random() < win_chance:
            result = choice
        if result == choice:
            multiplier = 14.0 if choice in ["–ó–µ–ª—ë–Ω–æ–µ", "Green"] else 2.0
            winnings = bet * multiplier
            user.balance += winnings
            user.total_winnings += winnings
            session.commit()
            await bot.send_message(
                chat_id=message.chat.id,
                text=translations["roulette_win"].format(result, winnings, user.balance),
                parse_mode="HTML",
                reply_markup=get_main_menu(user.language)
            )
        else:
            await bot.send_message(
                chat_id=message.chat.id,
                text=translations["roulette_lose"].format(result, user.balance),
                parse_mode="HTML",
                reply_markup=get_main_menu(user.language)
            )
        await state.clear()
    except Exception as e:
        session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_roulette_choice: {str(e)}", exc_info=True)
        await bot.send_message(
            chat_id=message.chat.id,
            text=translations["error"],
            parse_mode="HTML",
            reply_markup=get_main_menu(user.language)
        )
        await state.clear()
    finally:
        session.close()
        logger.debug("Session closed")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥—Ä—ã –ë–æ–ª—å—à–µ/–ú–µ–Ω—å—à–µ
@dp.message(GameState.overunder_choice)
async def process_overunder_choice(message: Message, state: FSMContext):
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω –≤—ã–±–æ—Ä –¥–ª—è –ë–æ–ª—å—à–µ/–ú–µ–Ω—å—à–µ –æ—Ç {message.from_user.id}: {message.text}")
    session = Session()
    try:
        user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
        if not user or user.is_banned:
            await bot.send_message(
                chat_id=message.chat.id,
                text=TRANSLATIONS["ru"]["error"] if not user else "‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã! üö´",
                parse_mode="HTML",
                reply_markup=get_main_menu("ru")
            )
            await state.clear()
            return
        translations = TRANSLATIONS.get(user.language, TRANSLATIONS["ru"])
        choice = message.text
        if choice not in ["–ë–æ–ª—å—à–µ", "–ú–µ–Ω—å—à–µ", "Over", "Under"]:
            await bot.send_message(
                chat_id=message.chat.id,
                text=translations["overunder_start"],
                parse_mode="HTML",
                reply_markup=get_overunder_keyboard(user.language)
            )
            return
        data = await state.get_data()
        bet = data.get("bet", 0.0)
        roll = random.randint(2, 12)
        win_chance = get_win_chance(user, ADMIN_CHAT_ID)
        if random.random() < win_chance:
            roll = 8 if choice in ["–ë–æ–ª—å—à–µ", "Over"] else 6
        result = "–ë–æ–ª—å—à–µ" if roll > 7 else "–ú–µ–Ω—å—à–µ" if user.language == "ru" else "Over" if roll > 7 else "Under"
        if result == choice:
            winnings = bet * 2.0
            user.balance += winnings
            user.total_winnings += winnings
            session.commit()
            await bot.send_message(
                chat_id=message.chat.id,
                text=translations["overunder_win"].format(roll, winnings, user.balance),
                parse_mode="HTML",
                reply_markup=get_main_menu(user.language)
            )
        else:
            await bot.send_message(
                chat_id=message.chat.id,
                text=translations["overunder_lose"].format(roll, user.balance),
                parse_mode="HTML",
                reply_markup=get_main_menu(user.language)
            )
        await state.clear()
    except Exception as e:
        session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_overunder_choice: {str(e)}", exc_info=True)
        await bot.send_message(
            chat_id=message.chat.id,
            text=translations["error"],
            parse_mode="HTML",
            reply_markup=get_main_menu(user.language)
        )
        await state.clear()
    finally:
        session.close()
        logger.debug("Session closed")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥—Ä—ã –£–≥–∞–¥–∞–π –¶–≤–µ—Ç
@dp.message(GameState.guesscolor_choice)
async def process_guesscolor_choice(message: Message, state: FSMContext):
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω –≤—ã–±–æ—Ä –¥–ª—è –£–≥–∞–¥–∞–π –¶–≤–µ—Ç –æ—Ç {message.from_user.id}: {message.text}")
    session = Session()
    try:
        user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
        if not user or user.is_banned:
            await bot.send_message(
                chat_id=message.chat.id,
                text=TRANSLATIONS["ru"]["error"] if not user else "‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã! üö´",
                parse_mode="HTML",
                reply_markup=get_main_menu("ru")
            )
            await state.clear()
            return
        translations = TRANSLATIONS.get(user.language, TRANSLATIONS["ru"])
        choice = message.text
        if choice not in ["–ö—Ä–∞—Å–Ω—ã–π", "–°–∏–Ω–∏–π", "–ñ—ë–ª—Ç—ã–π", "–ó–µ–ª—ë–Ω—ã–π", "Red", "Blue", "Yellow", "Green"]:
            await bot.send_message(
                chat_id=message.chat.id,
                text=translations["guesscolor_start"],
                parse_mode="HTML",
                reply_markup=get_guesscolor_keyboard(user.language)
            )
            return
        data = await state.get_data()
        bet = data.get("bet", 0.0)
        result = random.choice(["–ö—Ä–∞—Å–Ω—ã–π", "–°–∏–Ω–∏–π", "–ñ—ë–ª—Ç—ã–π", "–ó–µ–ª—ë–Ω—ã–π"] if user.language == "ru" else ["Red", "Blue", "Yellow", "Green"])
        win_chance = get_win_chance(user, ADMIN_CHAT_ID)
        if random.random() < win_chance:
            result = choice
        if result == choice:
            winnings = bet * 4.0
            user.balance += winnings
            user.total_winnings += winnings
            session.commit()
            await bot.send_message(
                chat_id=message.chat.id,
                text=translations["guesscolor_win"].format(result, winnings, user.balance),
                parse_mode="HTML",
                reply_markup=get_main_menu(user.language)
            )
        else:
            await bot.send_message(
                chat_id=message.chat.id,
                text=translations["guesscolor_lose"].format(result, user.balance),
                parse_mode="HTML",
                reply_markup=get_main_menu(user.language)
            )
        await state.clear()
    except Exception as e:
        session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_guesscolor_choice: {str(e)}", exc_info=True)
        await bot.send_message(
            chat_id=message.chat.id,
            text=translations["error"],
            parse_mode="HTML",
            reply_markup=get_main_menu(user.language)
        )
        await state.clear()
    finally:
        session.close()
        logger.debug("Session closed")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.message(TransactionState.deposit_method)
async def process_deposit_method(message: Message, state: FSMContext):
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç {message.from_user.id}: {message.text}")
    session = Session()
    try:
        user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
        if not user or user.is_banned:
            await bot.send_message(
                chat_id=message.chat.id,
                text=TRANSLATIONS["ru"]["error"] if not user else "‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã! üö´",
                parse_mode="HTML",
                reply_markup=get_main_menu("ru")
            )
            await state.clear()
            return
        translations = TRANSLATIONS.get(user.language, TRANSLATIONS["ru"])
        method = message.text
        if method not in ["–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ üí≥", "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∫–æ—à–µ–ª—ë–∫ üí∏", "Bank Card üí≥", "E-Wallet üí∏"]:
            await bot.send_message(
                chat_id=message.chat.id,
                text=translations["deposit_method"],
                parse_mode="HTML",
                reply_markup=get_deposit_method_keyboard(user.language)
            )
            return
        await state.update_data(deposit_method=method)
        await bot.send_message(
            chat_id=message.chat.id,
            text=translations["deposit_amount"],
            parse_mode="HTML"
        )
        await state.set_state(TransactionState.deposit_amount)
    except Exception as e:
        session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_deposit_method: {str(e)}", exc_info=True)
        await bot.send_message(
            chat_id=message.chat.id,
            text=translations["error"],
            parse_mode="HTML",
            reply_markup=get_main_menu(user.language)
        )
        await state.clear()
    finally:
        session.close()
        logger.debug("Session closed")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.message(TransactionState.deposit_amount)
async def process_deposit_amount(message: Message, state: FSMContext):
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∞ —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç {message.from_user.id}: {message.text}")
    session = Session()
    try:
        user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
        if not user or user.is_banned:
            await bot.send_message(
                chat_id=message.chat.id,
                text=TRANSLATIONS["ru"]["error"] if not user else "‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã! üö´",
                parse_mode="HTML",
                reply_markup=get_main_menu("ru")
            )
            await state.clear()
            return
        translations = TRANSLATIONS.get(user.language, TRANSLATIONS["ru"])
        try:
            amount = float(message.text.strip())
            if amount < 1000:
                await bot.send_message(
                    chat_id=message.chat.id,
                    text=translations["deposit_amount"],
                    parse_mode="HTML"
                )
                return
            await state.update_data(deposit_amount=amount)
            await bot.send_message(
                chat_id=message.chat.id,
                text=translations["deposit_details"],
                parse_mode="HTML"
            )
            await state.set_state(TransactionState.deposit_details)
        except ValueError:
            await bot.send_message(
                chat_id=message.chat.id,
                text=translations["deposit_amount"],
                parse_mode="HTML"
            )
    except Exception as e:
        session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_deposit_amount: {str(e)}", exc_info=True)
        await bot.send_message(
            chat_id=message.chat.id,
            text=translations["error"],
            parse_mode="HTML",
            reply_markup=get_main_menu(user.language)
        )
        await state.clear()
    finally:
        session.close()
        logger.debug("Session closed")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ—Ç–∞–ª–µ–π –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.message(TransactionState.deposit_details)
async def process_deposit_details(message: Message, state: FSMContext):
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–µ—Ç–∞–ª–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç {message.from_user.id}: {message.text}")
    session = Session()
    try:
        user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
        if not user or user.is_banned:
            await bot.send_message(
                chat_id=message.chat.id,
                text=TRANSLATIONS["ru"]["error"] if not user else "‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã! üö´",
                parse_mode="HTML",
                reply_markup=get_main_menu("ru")
            )
            await state.clear()
            return
        translations = TRANSLATIONS.get(user.language, TRANSLATIONS["ru"])
        data = await state.get_data()
        method = data.get("deposit_method")
        amount = data.get("deposit_amount")
        details = message.text.strip()
        withdraw_request = WithdrawRequest(
            user_id=user.id,
            amount=amount,
            method=method,
            details=details,
            status="pending"
        )
        session.add(withdraw_request)
        session.commit()
        await bot.send_message(
            chat_id=message.chat.id,
            text=translations["deposit_success"].format(amount, user.balance),
            parse_mode="HTML",
            reply_markup=get_main_menu(user.language)
        )
        await bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=translations["admin_deposit_request"].format(
                user.telegram_id, user.username or "User", amount, method, details,
                withdraw_request.id, user.id
            ),
            parse_mode="HTML"
        )
        await state.clear()
    except Exception as e:
        session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_deposit_details: {str(e)}", exc_info=True)
        await bot.send_message(
            chat_id=message.chat.id,
            text=translations["error"],
            parse_mode="HTML",
            reply_markup=get_main_menu(user.language)
        )
        await state.clear()
    finally:
        session.close()
        logger.debug("Session closed")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –≤—ã–≤–æ–¥–∞
@dp.message(TransactionState.withdraw_method)
async def process_withdraw_method(message: Message, state: FSMContext):
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –≤—ã–≤–æ–¥–∞ –æ—Ç {message.from_user.id}: {message.text}")
    session = Session()
    try:
        user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
        if not user or user.is_banned:
            await bot.send_message(
                chat_id=message.chat.id,
                text=TRANSLATIONS["ru"]["error"] if not user else "‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã! üö´",
                parse_mode="HTML",
                reply_markup=get_main_menu("ru")
            )
            await state.clear()
            return
        translations = TRANSLATIONS.get(user.language, TRANSLATIONS["ru"])
        method = message.text
        if method not in ["–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ üí≥", "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∫–æ—à–µ–ª—ë–∫ üí∏", "Bank Card üí≥", "E-Wallet üí∏"]:
            await bot.send_message(
                chat_id=message.chat.id,
                text=translations["withdraw_method"],
                parse_mode="HTML",
                reply_markup=get_withdraw_method_keyboard(user.language)
            )
            return
        await state.update_data(withdraw_method=method)
        await bot.send_message(
            chat_id=message.chat.id,
            text=translations["withdraw_amount"],
            parse_mode="HTML"
        )
        await state.set_state(TransactionState.withdraw_amount)
    except Exception as e:
        session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_withdraw_method: {str(e)}", exc_info=True)
        await bot.send_message(
            chat_id=message.chat.id,
            text=translations["error"],
            parse_mode="HTML",
            reply_markup=get_main_menu(user.language)
        )
        await state.clear()
    finally:
        session.close()
        logger.debug("Session closed")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—É–º–º—ã –≤—ã–≤–æ–¥–∞
@dp.message(TransactionState.withdraw_amount)
async def process_withdraw_amount(message: Message, state: FSMContext):
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∞ —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ –æ—Ç {message.from_user.id}: {message.text}")
    session = Session()
    try:
        user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
        if not user or user.is_banned:
            await bot.send_message(
                chat_id=message.chat.id,
                text=TRANSLATIONS["ru"]["error"] if not user else "‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã! üö´",
                parse_mode="HTML",
                reply_markup=get_main_menu("ru")
            )
            await state.clear()
            return
        translations = TRANSLATIONS.get(user.language, TRANSLATIONS["ru"])
        try:
            amount = float(message.text.strip())
            if amount < 1000:
                await bot.send_message(
                    chat_id=message.chat.id,
                    text=translations["withdraw_amount"],
                    parse_mode="HTML"
                )
                return
            if amount > user.balance:
                await bot.send_message(
                    chat_id=message.chat.id,
                    text=translations["insufficient_balance"].format(user.balance),
                    parse_mode="HTML"
                )
                return
            await state.update_data(withdraw_amount=amount)
            await bot.send_message(
                chat_id=message.chat.id,
                text=translations["withdraw_details"],
                parse_mode="HTML"
            )
            await state.set_state(TransactionState.withdraw_details)
        except ValueError:
            await bot.send_message(
                chat_id=message.chat.id,
                text=translations["withdraw_amount"],
                parse_mode="HTML"
            )
    except Exception as e:
        session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_withdraw_amount: {str(e)}", exc_info=True)
        await bot.send_message(
            chat_id=message.chat.id,
            text=translations["error"],
            parse_mode="HTML",
            reply_markup=get_main_menu(user.language)
        )
        await state.clear()
    finally:
        session.close()
        logger.debug("Session closed")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ—Ç–∞–ª–µ–π –≤—ã–≤–æ–¥–∞
@dp.message(TransactionState.withdraw_details)
async def process_withdraw_details(message: Message, state: FSMContext):
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–µ—Ç–∞–ª–∏ –≤—ã–≤–æ–¥–∞ –æ—Ç {message.from_user.id}: {message.text}")
    session = Session()
    try:
        user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
        if not user or user.is_banned:
            await bot.send_message(
                chat_id=message.chat.id,
                text=TRANSLATIONS["ru"]["error"] if not user else "‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã! üö´",
                parse_mode="HTML",
                reply_markup=get_main_menu("ru")
            )
            await state.clear()
            return
        translations = TRANSLATIONS.get(user.language, TRANSLATIONS["ru"])
        data = await state.get_data()
        method = data.get("withdraw_method")
        amount = data.get("withdraw_amount")
        details = message.text.strip()
        user.balance -= amount
        user.withdrawal_count += 1
        user.total_withdrawals += amount
        withdraw_request = WithdrawRequest(
            user_id=user.id,
            amount=amount,
            method=method,
            details=details,
            status="pending"
        )
        session.add(withdraw_request)
        session.commit()
        await bot.send_message(
            chat_id=message.chat.id,
            text=translations["withdraw_success"].format(amount, user.balance),
            parse_mode="HTML",
            reply_markup=get_main_menu(user.language)
        )
        await bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=translations["admin_withdraw_request"].format(
                user.telegram_id, user.username or "User", amount, method, details,
                withdraw_request.id, user.id
            ),
            parse_mode="HTML"
        )
        await state.clear()
    except Exception as e:
        session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_withdraw_details: {str(e)}", exc_info=True)
        await bot.send_message(
            chat_id=message.chat.id,
            text=translations["error"],
            parse_mode="HTML",
            reply_markup=get_main_menu(user.language)
        )
        await state.clear()
    finally:
        session.close()
        logger.debug("Session closed")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.message(RegexpCommandsFilter(regexp_commands=[r"/approve_deposit_(\d+)_(\d+)"]))
async def approve_deposit(message: Message, regexp_command: re.Match):
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç {message.from_user.id}: {message.text}")
    if message.from_user.id != ADMIN_CHAT_ID:
        await bot.send_message(
            chat_id=message.chat.id,
            text=TRANSLATIONS["ru"]["not_admin"],
            parse_mode="HTML"
        )
        return
    session = Session()
    try:
        request_id = int(regexp_command.group(1))
        user_id = int(regexp_command.group(2))
        request = session.query(WithdrawRequest).filter_by(id=request_id, user_id=user_id, status="pending").first()
        if not request:
            await bot.send_message(
                chat_id=message.chat.id,
                text="‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!",
                parse_mode="HTML"
            )
            return
        user = session.query(User).filter_by(id=user_id).first()
        if not user:
            await bot.send_message(
                chat_id=message.chat.id,
                text=TRANSLATIONS["ru"]["admin_user_not_found"],
                parse_mode="HTML"
            )
            return
        user.balance += request.amount
        user.deposit_count += 1
        user.total_deposits += request.amount
        request.status = "approved"
        session.commit()
        translations = TRANSLATIONS.get(user.language, TRANSLATIONS["ru"])
        await bot.send_message(
            chat_id=message.chat.id,
            text=translations["admin_deposit_approve"].format(request.amount, user.username or "User", user.balance),
            parse_mode="HTML"
        )
        await bot.send_message(
            chat_id=user.telegram_id,
            text=translations["deposit_success"].format(request.amount, user.balance),
            parse_mode="HTML",
            reply_markup=get_main_menu(user.language)
        )
    except Exception as e:
        session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –≤ approve_deposit: {str(e)}", exc_info=True)
        await bot.send_message(
            chat_id=message.chat.id,
            text=TRANSLATIONS["ru"]["error"],
            parse_mode="HTML"
        )
    finally:
        session.close()
        logger.debug("Session closed")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.message(RegexpCommandsFilter(regexp_commands=[r"/decline_deposit_(\d+)_(\d+)"]))
async def decline_deposit(message: Message, regexp_command: re.Match):
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç {message.from_user.id}: {message.text}")
    if message.from_user.id != ADMIN_CHAT_ID:
        await bot.send_message(
            chat_id=message.chat.id,
            text=TRANSLATIONS["ru"]["not_admin"],
            parse_mode="HTML"
        )
        return
    session = Session()
    try:
        request_id = int(regexp_command.group(1))
        user_id = int(regexp_command.group(2))
        request = session.query(WithdrawRequest).filter_by(id=request_id, user_id=user_id, status="pending").first()
        if not request:
            await bot.send_message(
                chat_id=message.chat.id,
                text="‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!",
                parse_mode="HTML"
            )
            return
        user = session.query(User).filter_by(id=user_id).first()
        if not user:
            await bot.send_message(
                chat_id=message.chat.id,
                text=TRANSLATIONS["ru"]["admin_user_not_found"],
                parse_mode="HTML"
            )
            return
        request.status = "declined"
        session.commit()
        translations = TRANSLATIONS.get(user.language, TRANSLATIONS["ru"])
        await bot.send_message(
            chat_id=message.chat.id,
            text=translations["admin_deposit_decline"].format(request.amount, user.username or "User"),
            parse_mode="HTML"
        )
        await bot.send_message(
            chat_id=user.telegram_id,
            text=translations["admin_deposit_decline"].format(request.amount, user.username or "User"),
            parse_mode="HTML",
            reply_markup=get_main_menu(user.language)
        )
    except Exception as e:
        session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –≤ decline_deposit: {str(e)}", exc_info=True)
        await bot.send_message(
            chat_id=message.chat.id,
            text=TRANSLATIONS["ru"]["error"],
            parse_mode="HTML"
        )
    finally:
        session.close()
        logger.debug("Session closed")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–¥–æ–±—Ä–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞
@dp.message(RegexpCommandsFilter(regexp_commands=[r"/approve_withdraw_(\d+)_(\d+)"]))
async def approve_withdraw(message: Message, regexp_command: re.Match):
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞ –æ—Ç {message.from_user.id}: {message.text}")
    if message.from_user.id != ADMIN_CHAT_ID:
        await bot.send_message(
            chat_id=message.chat.id,
            text=TRANSLATIONS["ru"]["not_admin"],
            parse_mode="HTML"
        )
        return
    session = Session()
    try:
        request_id = int(regexp_command.group(1))
        user_id = int(regexp_command.group(2))
        request = session.query(WithdrawRequest).filter_by(id=request_id, user_id=user_id, status="pending").first()
        if not request:
            await bot.send_message(
                chat_id=message.chat.id,
                text="‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!",
                parse_mode="HTML"
            )
            return
        user = session.query(User).filter_by(id=user_id).first()
        if not user:
            await bot.send_message(
                chat_id=message.chat.id,
                text=TRANSLATIONS["ru"]["admin_user_not_found"],
                parse_mode="HTML"
            )
            return
        request.status = "approved"
        session.commit()
        translations = TRANSLATIONS.get(user.language, TRANSLATIONS["ru"])
        await bot.send_message(
            chat_id=message.chat.id,
            text=translations["admin_withdraw_approve"].format(request.amount, user.username or "User", user.balance),
            parse_mode="HTML"
        )
        await bot.send_message(
            chat_id=user.telegram_id,
            text=translations["withdraw_success"].format(request.amount, user.balance),
            parse_mode="HTML",
            reply_markup=get_main_menu(user.language)
        )
    except Exception as e:
        session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –≤ approve_withdraw: {str(e)}", exc_info=True)
        await bot.send_message(
            chat_id=message.chat.id,
            text=TRANSLATIONS["ru"]["error"],
            parse_mode="HTML"
        )
    finally:
        session.close()
        logger.debug("Session closed")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞
@dp.message(RegexpCommandsFilter(regexp_commands=[r"/decline_withdraw_(\d+)_(\d+)"]))
async def decline_withdraw(message: Message, regexp_command: re.Match):
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞ –æ—Ç {message.from_user.id}: {message.text}")
    if message.from_user.id != ADMIN_CHAT_ID:
        await bot.send_message(
            chat_id=message.chat.id,
            text=TRANSLATIONS["ru"]["not_admin"],
            parse_mode="HTML"
        )
        return
    session = Session()
    try:
        request_id = int(regexp_command.group(1))
        user_id = int(regexp_command.group(2))
        request = session.query(WithdrawRequest).filter_by(id=request_id, user_id=user_id, status="pending").first()
        if not request:
            await bot.send_message(
                chat_id=message.chat.id,
                text="‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!",
                parse_mode="HTML"
            )
            return
        user = session.query(User).filter_by(id=user_id).first()
        if not user:
            await bot.send_message(
                chat_id=message.chat.id,
                text=TRANSLATIONS["ru"]["admin_user_not_found"],
                parse_mode="HTML"
            )
            return
        user.balance += request.amount
        user.withdrawal_count -= 1
        user.total_withdrawals -= request.amount
        request.status = "declined"
        session.commit()
        translations = TRANSLATIONS.get(user.language, TRANSLATIONS["ru"])
        await bot.send_message(
            chat_id=message.chat.id,
            text=translations["admin_withdraw_decline"].format(request.amount, user.username or "User"),
            parse_mode="HTML"
        )
        await bot.send_message(
            chat_id=user.telegram_id,
            text=translations["admin_withdraw_decline"].format(request.amount, user.username or "User"),
            parse_mode="HTML",
            reply_markup=get_main_menu(user.language)
        )
    except Exception as e:
        session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –≤ decline_withdraw: {str(e)}", exc_info=True)
        await bot.send_message(
            chat_id=message.chat.id,
            text=TRANSLATIONS["ru"]["error"],
            parse_mode="HTML"
        )
    finally:
        session.close()
        logger.debug("Session closed")
# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}", exc_info=True)
        await asyncio.sleep(5)
        await main()

if __name__ == "__main__":
    asyncio.run(main())